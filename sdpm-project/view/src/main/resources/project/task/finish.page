#import("/org/tinygroup/form/components/form.component")
#import("/org/tinygroup/bootstrapDate/components/bootstrapDate.component")
<style>
#*.infoContent{margin:18px 4px 10px 5px; padding:6px; border:#eee 1px solid;}
.infoContent .titleName{margin-top:-16px; margin-bottom:8px;font-weight:bold;font-size:13px;}
.infoContent ul li label{font-weight:normal; width:33%;font-size:12px;}
.infoContent ul li .text-overflow{display:inline-block; width:64%;vertical-align:top;font-size:12px;}
.infoContent ul li .text-overflow a{ color:#333;}
.infoContent ul li .text-overflow a:hover{color:#f90}
.infoContent .Tinyfold .item h4{background:#f8f8f8;font-size:13px;font-weight:normal;}*#

</style>
#include("/project/task/taskMenu.page")
#@toggleBox({"class":"open"})##展开为class:OPEN 要附加其它的属性请用MAP带入
	#@toggleLeft({"class":"aclass"})
	   #@settoggleLeftTitle()产品文档库#end
		#@settoggleLeftBody("treeLeftbox")
			<ul class="treeList">
				<li id="listContent" style="display:none; position:absolute;left:74px;">
					<ul id="alternative" class="ztree" style="width:126px;min-height:160px;max-height:300px;"></ul>
				</li>
			</ul>
			<ul id="treeDrag" class="ztree"></ul>
		#end
	#end
	
#@toggleRight()
#@tinyForm("thisform" "url" "post" {"class":""})
	<div>
	#@elementItem()
		#@colLabel()总消耗#end
		#@formControlDiv("col-8")
			#tinyInput("text" "comsume-time" ""{"placeholder":"单位是小时","nullmsg":"请输入时间（小时）","id":"comsume-time","class":"input-text"})
		#end
		#@validateDiv("col-2")#end
	#end
	#@elementItem()
		#@colLabel()指派给#end
		#@formControlDiv("col-8")
			#@tinySelect("sort" "" {"class":"input-text","rel":"22"})
				#@tinyOptionItem("admin")A:admin#end
				#@tinyOptionItem("devm")D:development#end
				#@tinyOptionItem("testm")C:测试人员#end
			#end
		#end
		#@validateDiv("col-2")#end
	#end
	#@elementItem()
        #@colLabel()完成时间#end
        #@formControlDiv("skin-minimal col-5")
            #dateInputSimple("birthday" "" "YYYY-MM-DD")
        #end
        #@validateDiv("col-2")#end
    #end
	#@elementItem()
		#@colLabel()附件(50M)#end
		#@formControlDiv("col-8")
			#fileWithInput("file-1")
#*		<table class="fileBox" id="fileBox1">
		    <tbody>
		    <tr> 	
		      <td class="">#fileWithInput("file-1")</td>
		      <td class="w-30px"><a href="javascript:void();" onclick="addFile(this)" class="btn btn-block"><i class="icon-plus"></i></a></td>
		      <td class="w-30px"><a href="javascript:void();" onclick="delFile(this)" class="btn btn-block"><i class="icon-remove"></i></a></td>
		    </tr>
		  	</tbody>
  		</table>*#
		#end
		#@validateDiv("col-2")#end
	#end
	
##
	#@elementItem()
		#@colLabel()备注#end
		#@formControlDiv("col-8")
			#@Teditor("content" "content" {"initialFrameHeight":"200"})Say something#end
		#end
		#@validateDiv("col-2")#end
	#end
	
	
	#@elementItem()
		#@div(divClass="col-10 col-offset-2 form-inline")
			#tinyInput("submit" "submitbtn" " 完成 " {"class":"btn btn-primary"})
		#end
	#end
#end
</div>

#end
<div>
	#@div(divClass="infoContent")
        <p class="titleName">历史记录</p>
		#import("/org/tinygroup/fold/components/fold.component")
		#@foldMenu("" "Tinyfold3" "" "width:100%")
			#include("/project/recordlist.page")
		#end
	#end
</div>
<script type="text/javascript">
$(function(){
	$(".Hui_aside").scrollTop(380);
	/*折叠*/
	/*5个参数顺序不可打乱，分别是：相应区,隐藏显示的内容,速度,类型,事件*/
	$.Tinyfold("#Tinyfold3 .item h4","#Tinyfold3 .item .info","",3,"click");
});
</script>
#end
<script type="text/javascript">
 $(function(){
	$(".Hui_aside").scrollTop(380);
	/*折叠*/
	/*5个参数顺序不可打乱，分别是：相应区,隐藏显示的内容,速度,类型,事件*/
	$.Tinyfold("#Tinyfold3 .item h4","#Tinyfold3 .item .info","",3,"click");
  });
  </script>
  
  <script type="text/javascript">
		<!--
		var setting = {
			view: {
				addHoverDom: addHoverDom,
				removeHoverDom: removeHoverDom,
				selectedMulti: false
			},
			edit: {
				enable: true,
				editNameSelectAll: true,

			},
			data: {
				simpleData: {
					enable: true
				}
			},
			callback: {
				beforeDrag: beforeDrag,
				beforeEditName: beforeEditName,
				beforeRemove: beforeRemove,
				beforeRename: beforeRename,
				onRemove: onRemove,
				onRename: onRename
			}
		};
		var treeNodes =[
			{ id:1, pId:0, name:"随意拖拽", open:true},
			{ id:11, pId:1, name:"年龄 1-1"},
			{ id:12, pId:1, name:"年龄 1-2"},
			{ id:13, pId:1, name:"年龄 1-3"},
			{ id:2, pId:0, name:"随意拖拽2", open:true},
			{ id:21, pId:2, name:"学历 2-1"},
			{ id:22, pId:2, name:"学历  2-2"},
			{ id:23, pId:2, name:"学历  2-3"},
			{ id:3, pId:0, name:"禁止拖拽3", open:true, drag:false},
			{ id:31, pId:3, name:"城市 3-1", drag:false},
			{ id:32, pId:3, name:"城市 3-2", drag:false},
			{ id:33, pId:3, name:"地区 3-3", drag:false}
		];

		var log, className = "dark";
		function beforeDrag(treeId, treeNodes) {
			return false;
		}
		function beforeEditName(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeEditName ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.selectNode(treeNode);
			return confirm("进入节点 -- " + treeNode.name + " 的编辑状态吗？");
		}
		function beforeRemove(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.selectNode(treeNode);
			return confirm("确认删除 节点 -- " + treeNode.name + " 吗？");
		}
		function onRemove(e, treeId, treeNode) {
			showLog("[ "+getTime()+" onRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
		}
		function beforeRename(treeId, treeNode, newName, isCancel) {
			className = (className === "dark" ? "":"dark");
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" beforeRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
			if (newName.length == 0) {
				alert("节点名称不能为空.");
				var zTree = $.fn.zTree.getZTreeObj("treeDrag");
				setTimeout(function(){zTree.editName(treeNode)}, 10);
				return false;
			}
			return true;
		}
		function onRename(e, treeId, treeNode, isCancel) {
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" onRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
		}
		function showRemoveBtn(treeId, treeNode) {
			return !treeNode.isFirstNode;
		}
		function showRenameBtn(treeId, treeNode) {
			return !treeNode.isLastNode;
		}
		function showLog(str) {
			if (!log) log = $("#log");
			log.append("<li class='"+className+"'>"+str+"</li>");
			if(log.children("li").length > 8) {
				log.get(0).removeChild(log.children("li")[0]);
			}
		}
		function getTime() {
			var now= new Date(),
			h=now.getHours(),
			m=now.getMinutes(),
			s=now.getSeconds(),
			ms=now.getMilliseconds();
			return (h+":"+m+":"+s+ " " +ms);
		}

		var newCount = 1;
		function addHoverDom(treeId, treeNode) {
			var sObj = $("#" + treeNode.tId + "_span");
			if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
			var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
				+ "' title='add node' onfocus='this.blur();'></span>";
			sObj.after(addStr);
			var btn = $("#addBtn_"+treeNode.tId);
			if (btn) btn.bind("click", function(){
				var zTree = $.fn.zTree.getZTreeObj("treeDrag");
				zTree.addNodes(treeNode, {id:(100 + newCount), pId:treeNode.id, name:"new node" + (newCount++)});
				return false;
			});
		};
		function removeHoverDom(treeId, treeNode) {
			$("#addBtn_"+treeNode.tId).unbind().remove();
		};
		function selectAll() {
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.setting.edit.editNameSelectAll =  $("#selectAll").attr("checked");
		}

		$(document).ready(function(){
			$.fn.zTree.init($("#treeDrag"), setting);
			$("#selectAll").bind("click", selectAll);
		});
		//-->

		function dropPrev(treeId, nodes, targetNode) {
			var pNode = targetNode.getParentNode();
			if (pNode && pNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					var curPNode = curDragNodes[i].getParentNode();
					if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}
		function dropInner(treeId, nodes, targetNode) {
			if (targetNode && targetNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					if (!targetNode && curDragNodes[i].dropRoot === false) {
						return false;
					} else if (curDragNodes[i].parentTId && curDragNodes[i].getParentNode() !== targetNode && curDragNodes[i].getParentNode().childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}
		function dropNext(treeId, nodes, targetNode) {
			var pNode = targetNode.getParentNode();
			if (pNode && pNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					var curPNode = curDragNodes[i].getParentNode();
					if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}

		var log, className = "dark", curDragNodes, autoExpandNode;
		function beforeDrag(treeId, treeNodes) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeDrag ]&nbsp;&nbsp;&nbsp;&nbsp; drag: " + treeNodes.length + " nodes." );
			for (var i=0,l=treeNodes.length; i<l; i++) {
				if (treeNodes[i].drag === false) {
					curDragNodes = null;
					return false;
				} else if (treeNodes[i].parentTId && treeNodes[i].getParentNode().childDrag === false) {
					curDragNodes = null;
					return false;
				}
			}
			curDragNodes = treeNodes;
			return true;
		}
		function beforeDragOpen(treeId, treeNode) {
			autoExpandNode = treeNode;
			return true;
		}
		function beforeDrop(treeId, treeNodes, targetNode, moveType, isCopy) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeDrop ]&nbsp;&nbsp;&nbsp;&nbsp; moveType:" + moveType);
			showLog("target: " + (targetNode ? targetNode.name : "root") + "  -- is "+ (isCopy==null? "cancel" : isCopy ? "copy" : "move"));
			return true;
		}
		function onDrag(event, treeId, treeNodes) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" onDrag ]&nbsp;&nbsp;&nbsp;&nbsp; drag: " + treeNodes.length + " nodes." );
		}
		function onDrop(event, treeId, treeNodes, targetNode, moveType, isCopy) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" onDrop ]&nbsp;&nbsp;&nbsp;&nbsp; moveType:" + moveType);
			showLog("target: " + (targetNode ? targetNode.name : "root") + "  -- is "+ (isCopy==null? "cancel" : isCopy ? "copy" : "move"))
		}
		function onExpand(event, treeId, treeNode) {
			if (treeNode === autoExpandNode) {
				className = (className === "dark" ? "":"dark");
				showLog("[ "+getTime()+" onExpand ]&nbsp;&nbsp;&nbsp;&nbsp;" + treeNode.name);
			}
		}

		function showLog(str) {
			if (!log) log = $("#log");
			log.append("<li class='"+className+"'>"+str+"</li>");
			if(log.children("li").length > 8) {
				log.get(0).removeChild(log.children("li")[0]);
			}
		}
		function getTime() {
			var now= new Date(),
			h=now.getHours(),
			m=now.getMinutes(),
			s=now.getSeconds(),
			ms=now.getMilliseconds();
			return (h+":"+m+":"+s+ " " +ms);
		}

		function setTrigger() {
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.setting.edit.drag.autoExpandTrigger = $("#callbackTrigger").attr("checked");
		}

		$(document).ready(function(){
			$.fn.zTree.init($("#treeDrag"), setting, treeNodes);
			$("#callbackTrigger").bind("change", {}, setTrigger);
		});
		//-->
	</script>
