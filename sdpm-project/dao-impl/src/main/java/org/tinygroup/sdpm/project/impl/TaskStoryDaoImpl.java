/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.project.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.project.constant.TaskStoryTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.project.pojo.TaskStory;
import org.tinygroup.sdpm.project.inter.TaskStoryDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class TaskStoryDaoImpl extends TinyDslDaoSupport implements TaskStoryDao {

	public TaskStory insertObject(TaskStory taskStory) {
		return getDslTemplate().insertObject(taskStory, new InsertGenerateCallback<TaskStory>() {
			public Insert generate(TaskStory t) {
				Insert insert = insertInto(TASKSTORYTABLE).values(
					TASKSTORYTABLE.TASK_STORY_ID.value(t.getTaskStoryId()),
					TASKSTORYTABLE.TASK_ID.value(t.getTaskId()),
					TASKSTORYTABLE.STORY_ID.value(t.getStoryId()),
					TASKSTORYTABLE.STORY_VERSION.value(t.getStoryVersion()),
					TASKSTORYTABLE.COMPANY_ID.value(t.getCompanyId()));
				return insert;
			}
		});
	}

	public TaskStory insertObject(boolean autoGeneratedKeys ,TaskStory taskStory) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,taskStory, new InsertGenerateCallback<TaskStory>() {

			public Insert generate(TaskStory t) {
				Insert insert = insertInto(TASKSTORYTABLE).values(
					TASKSTORYTABLE.TASK_STORY_ID.value(t.getTaskStoryId()),
					TASKSTORYTABLE.TASK_ID.value(t.getTaskId()),
					TASKSTORYTABLE.STORY_ID.value(t.getStoryId()),
					TASKSTORYTABLE.STORY_VERSION.value(t.getStoryVersion()),
					TASKSTORYTABLE.COMPANY_ID.value(t.getCompanyId()));
				return insert;
			}
		});
	}

	public int updateObject(TaskStory taskStory) {
		return getDslTemplate().updateObject(taskStory, new UpdateGenerateCallback<TaskStory>() {
			public Update generate(TaskStory t) {
				Update update = update(TASKSTORYTABLE).set(
					TASKSTORYTABLE.TASK_ID.value(t.getTaskId()),
					TASKSTORYTABLE.STORY_ID.value(t.getStoryId()),
					TASKSTORYTABLE.STORY_VERSION.value(t.getStoryVersion()),
					TASKSTORYTABLE.COMPANY_ID.value(t.getCompanyId())).where(
					TASKSTORYTABLE.TASK_STORY_ID.eq(t.getTaskStoryId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(TASKSTORYTABLE).where(TASKSTORYTABLE.TASK_STORY_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(TASKSTORYTABLE).where(TASKSTORYTABLE.TASK_STORY_ID.in(t));
		}
		},pks);
	}

	public TaskStory getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, TaskStory.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(TASKSTORYTABLE).where(TASKSTORYTABLE.TASK_STORY_ID.eq(t));
			}
		});
	}

	public List<TaskStory> queryObjects(TaskStory taskStory) {
		if(taskStory==null){
			taskStory=new TaskStory();
		}
		return getDslTemplate().queryObjects(taskStory, new SelectGenerateCallback<TaskStory>() {

			@SuppressWarnings("rawtypes")
			public Select generate(TaskStory t) {
				return selectFrom(TASKSTORYTABLE).where(
				and(
					TASKSTORYTABLE.TASK_ID.eq(t.getTaskId()),
					TASKSTORYTABLE.STORY_ID.eq(t.getStoryId()),
					TASKSTORYTABLE.STORY_VERSION.eq(t.getStoryVersion()),
					TASKSTORYTABLE.COMPANY_ID.eq(t.getCompanyId())));
			}
		});
	}

	public Pager<TaskStory> queryObjectsForPage(int start,int limit ,TaskStory taskStory) {
		if(taskStory==null){
			taskStory=new TaskStory();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, taskStory, false, new SelectGenerateCallback<TaskStory>() {

			public Select generate(TaskStory t) {
				return MysqlSelect.selectFrom(TASKSTORYTABLE).where(
				and(
					TASKSTORYTABLE.TASK_ID.eq(t.getTaskId()),
					TASKSTORYTABLE.STORY_ID.eq(t.getStoryId()),
					TASKSTORYTABLE.STORY_VERSION.eq(t.getStoryVersion()),
					TASKSTORYTABLE.COMPANY_ID.eq(t.getCompanyId())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<TaskStory> taskStorys) {
		if (CollectionUtil.isEmpty(taskStorys)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, taskStorys, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(TASKSTORYTABLE).values(
					TASKSTORYTABLE.TASK_ID.value(new JdbcNamedParameter("taskId")),
					TASKSTORYTABLE.STORY_ID.value(new JdbcNamedParameter("storyId")),
					TASKSTORYTABLE.STORY_VERSION.value(new JdbcNamedParameter("storyVersion")),
					TASKSTORYTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")));
			}
		});
	}

	public int[] batchInsert(List<TaskStory> taskStorys){
			return batchInsert(true ,taskStorys);
	}

	public int[] batchUpdate(List<TaskStory> taskStorys) {
		if (CollectionUtil.isEmpty(taskStorys)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(taskStorys, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(TASKSTORYTABLE).set(
					TASKSTORYTABLE.TASK_ID.value(new JdbcNamedParameter("taskId")),
					TASKSTORYTABLE.STORY_ID.value(new JdbcNamedParameter("storyId")),
					TASKSTORYTABLE.STORY_VERSION.value(new JdbcNamedParameter("storyVersion")),
					TASKSTORYTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId"))).where(
				TASKSTORYTABLE.TASK_STORY_ID.eq(new JdbcNamedParameter("taskStoryId")));
			}
		});
	}

	public int[] batchDelete(List<TaskStory> taskStorys) {
		if (CollectionUtil.isEmpty(taskStorys)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(taskStorys, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(TASKSTORYTABLE).where(and(
				TASKSTORYTABLE.TASK_STORY_ID.eq(new JdbcNamedParameter("taskStoryId")),
				TASKSTORYTABLE.TASK_ID.eq(new JdbcNamedParameter("taskId")),
				TASKSTORYTABLE.STORY_ID.eq(new JdbcNamedParameter("storyId")),
				TASKSTORYTABLE.STORY_VERSION.eq(new JdbcNamedParameter("storyVersion")),
				TASKSTORYTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId"))));
			}
		});
	}

}
