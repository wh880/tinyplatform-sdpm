/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.project.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.project.constant.PmcTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.project.pojo.Pmc;
import org.tinygroup.sdpm.project.inter.PmcDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class PmcDaoImpl extends TinyDslDaoSupport implements PmcDao {

	public Pmc insertObject(Pmc pmc) {
		return getDslTemplate().insertObject(pmc, new InsertGenerateCallback<Pmc>() {
			public Insert generate(Pmc t) {
				Insert insert = insertInto(PMCTABLE).values(
					PMCTABLE.PMC_ID.value(t.getPmcId()),
					PMCTABLE.COMPANY_ID.value(t.getCompanyId()),
					PMCTABLE.PROJECT_ID.value(t.getProjectId()),
					PMCTABLE.PMC_DATE.value(t.getPmcDate()),
					PMCTABLE.PMC_LEFT.value(t.getPmcLeft()),
					PMCTABLE.PMC_TASKNUM.value(t.getPmcTasknum()),
					PMCTABLE.PMC_AC.value(t.getPmcAc()),
					PMCTABLE.PMC_PV.value(t.getPmcPv()),
					PMCTABLE.PMC_EV.value(t.getPmcEv()),
					PMCTABLE.PMC_CPI.value(t.getPmcCpi()),
					PMCTABLE.PMC_SPI.value(t.getPmcSpi()),
					PMCTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Pmc insertObject(boolean autoGeneratedKeys ,Pmc pmc) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,pmc, new InsertGenerateCallback<Pmc>() {

			public Insert generate(Pmc t) {
				Insert insert = insertInto(PMCTABLE).values(
					PMCTABLE.PMC_ID.value(t.getPmcId()),
					PMCTABLE.COMPANY_ID.value(t.getCompanyId()),
					PMCTABLE.PROJECT_ID.value(t.getProjectId()),
					PMCTABLE.PMC_DATE.value(t.getPmcDate()),
					PMCTABLE.PMC_LEFT.value(t.getPmcLeft()),
					PMCTABLE.PMC_TASKNUM.value(t.getPmcTasknum()),
					PMCTABLE.PMC_AC.value(t.getPmcAc()),
					PMCTABLE.PMC_PV.value(t.getPmcPv()),
					PMCTABLE.PMC_EV.value(t.getPmcEv()),
					PMCTABLE.PMC_CPI.value(t.getPmcCpi()),
					PMCTABLE.PMC_SPI.value(t.getPmcSpi()),
					PMCTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Pmc pmc) {
		return getDslTemplate().updateObject(pmc, new UpdateGenerateCallback<Pmc>() {
			public Update generate(Pmc t) {
				Update update = update(PMCTABLE).set(
					PMCTABLE.COMPANY_ID.value(t.getCompanyId()),
					PMCTABLE.PROJECT_ID.value(t.getProjectId()),
					PMCTABLE.PMC_DATE.value(t.getPmcDate()),
					PMCTABLE.PMC_LEFT.value(t.getPmcLeft()),
					PMCTABLE.PMC_TASKNUM.value(t.getPmcTasknum()),
					PMCTABLE.PMC_AC.value(t.getPmcAc()),
					PMCTABLE.PMC_PV.value(t.getPmcPv()),
					PMCTABLE.PMC_EV.value(t.getPmcEv()),
					PMCTABLE.PMC_CPI.value(t.getPmcCpi()),
					PMCTABLE.PMC_SPI.value(t.getPmcSpi()),
					PMCTABLE.DELETED.value(t.getDeleted())).where(
					PMCTABLE.PMC_ID.eq(t.getPmcId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(PMCTABLE).where(PMCTABLE.PMC_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(PMCTABLE).where(PMCTABLE.PMC_ID.in(t));
		}
		},pks);
	}

	public Pmc getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Pmc.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(PMCTABLE).where(PMCTABLE.PMC_ID.eq(t));
			}
		});
	}

	public List<Pmc> queryObjects(Pmc pmc) {
		if(pmc==null){
			pmc=new Pmc();
		}
		return getDslTemplate().queryObjects(pmc, new SelectGenerateCallback<Pmc>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Pmc t) {
				return selectFrom(PMCTABLE).where(
				and(
					PMCTABLE.COMPANY_ID.eq(t.getCompanyId()),
					PMCTABLE.PROJECT_ID.eq(t.getProjectId()),
					PMCTABLE.PMC_DATE.eq(t.getPmcDate()),
					PMCTABLE.PMC_LEFT.eq(t.getPmcLeft()),
					PMCTABLE.PMC_TASKNUM.eq(t.getPmcTasknum()),
					PMCTABLE.PMC_AC.eq(t.getPmcAc()),
					PMCTABLE.PMC_PV.eq(t.getPmcPv()),
					PMCTABLE.PMC_EV.eq(t.getPmcEv()),
					PMCTABLE.PMC_CPI.eq(t.getPmcCpi()),
					PMCTABLE.PMC_SPI.eq(t.getPmcSpi()),
					PMCTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Pmc> queryObjectsForPage(int start,int limit ,Pmc pmc) {
		if(pmc==null){
			pmc=new Pmc();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, pmc, false, new SelectGenerateCallback<Pmc>() {

			public Select generate(Pmc t) {
				return MysqlSelect.selectFrom(PMCTABLE).where(
				and(
					PMCTABLE.COMPANY_ID.eq(t.getCompanyId()),
					PMCTABLE.PROJECT_ID.eq(t.getProjectId()),
					PMCTABLE.PMC_DATE.eq(t.getPmcDate()),
					PMCTABLE.PMC_LEFT.eq(t.getPmcLeft()),
					PMCTABLE.PMC_TASKNUM.eq(t.getPmcTasknum()),
					PMCTABLE.PMC_AC.eq(t.getPmcAc()),
					PMCTABLE.PMC_PV.eq(t.getPmcPv()),
					PMCTABLE.PMC_EV.eq(t.getPmcEv()),
					PMCTABLE.PMC_CPI.eq(t.getPmcCpi()),
					PMCTABLE.PMC_SPI.eq(t.getPmcSpi()),
					PMCTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Pmc> pmcs) {
		if (CollectionUtil.isEmpty(pmcs)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, pmcs, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(PMCTABLE).values(
					PMCTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					PMCTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					PMCTABLE.PMC_DATE.value(new JdbcNamedParameter("pmcDate")),
					PMCTABLE.PMC_LEFT.value(new JdbcNamedParameter("pmcLeft")),
					PMCTABLE.PMC_TASKNUM.value(new JdbcNamedParameter("pmcTasknum")),
					PMCTABLE.PMC_AC.value(new JdbcNamedParameter("pmcAc")),
					PMCTABLE.PMC_PV.value(new JdbcNamedParameter("pmcPv")),
					PMCTABLE.PMC_EV.value(new JdbcNamedParameter("pmcEv")),
					PMCTABLE.PMC_CPI.value(new JdbcNamedParameter("pmcCpi")),
					PMCTABLE.PMC_SPI.value(new JdbcNamedParameter("pmcSpi")),
					PMCTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Pmc> pmcs){
			return batchInsert(true ,pmcs);
	}

	public int[] batchUpdate(List<Pmc> pmcs) {
		if (CollectionUtil.isEmpty(pmcs)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(pmcs, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(PMCTABLE).set(
					PMCTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					PMCTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					PMCTABLE.PMC_DATE.value(new JdbcNamedParameter("pmcDate")),
					PMCTABLE.PMC_LEFT.value(new JdbcNamedParameter("pmcLeft")),
					PMCTABLE.PMC_TASKNUM.value(new JdbcNamedParameter("pmcTasknum")),
					PMCTABLE.PMC_AC.value(new JdbcNamedParameter("pmcAc")),
					PMCTABLE.PMC_PV.value(new JdbcNamedParameter("pmcPv")),
					PMCTABLE.PMC_EV.value(new JdbcNamedParameter("pmcEv")),
					PMCTABLE.PMC_CPI.value(new JdbcNamedParameter("pmcCpi")),
					PMCTABLE.PMC_SPI.value(new JdbcNamedParameter("pmcSpi")),
					PMCTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				PMCTABLE.PMC_ID.eq(new JdbcNamedParameter("pmcId")));
			}
		});
	}

	public int[] batchDelete(List<Pmc> pmcs) {
		if (CollectionUtil.isEmpty(pmcs)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(pmcs, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(PMCTABLE).where(and(
				PMCTABLE.PMC_ID.eq(new JdbcNamedParameter("pmcId")),
				PMCTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				PMCTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				PMCTABLE.PMC_DATE.eq(new JdbcNamedParameter("pmcDate")),
				PMCTABLE.PMC_LEFT.eq(new JdbcNamedParameter("pmcLeft")),
				PMCTABLE.PMC_TASKNUM.eq(new JdbcNamedParameter("pmcTasknum")),
				PMCTABLE.PMC_AC.eq(new JdbcNamedParameter("pmcAc")),
				PMCTABLE.PMC_PV.eq(new JdbcNamedParameter("pmcPv")),
				PMCTABLE.PMC_EV.eq(new JdbcNamedParameter("pmcEv")),
				PMCTABLE.PMC_CPI.eq(new JdbcNamedParameter("pmcCpi")),
				PMCTABLE.PMC_SPI.eq(new JdbcNamedParameter("pmcSpi")),
				PMCTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
