/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.project.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.project.constant.RiskTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.project.pojo.Risk;
import org.tinygroup.sdpm.project.inter.RiskDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class RiskDaoImpl extends TinyDslDaoSupport implements RiskDao {

	public Risk insertObject(Risk risk) {
		return getDslTemplate().insertObject(risk, new InsertGenerateCallback<Risk>() {
			public Insert generate(Risk t) {
				Insert insert = insertInto(RISKTABLE).values(
					RISKTABLE.RISK_ID.value(t.getRiskId()),
					RISKTABLE.COMPANY_ID.value(t.getCompanyId()),
					RISKTABLE.PROJECT_ID.value(t.getProjectId()),
					RISKTABLE.RISK_OPENED_BY.value(t.getRiskOpenedBy()),
					RISKTABLE.RISK_OPEN_DATE.value(t.getRiskOpenDate()),
					RISKTABLE.RISK_TITLE.value(t.getRiskTitle()),
					RISKTABLE.RISK_SPEC.value(t.getRiskSpec()),
					RISKTABLE.RISK_CATEGORY.value(t.getRiskCategory()),
					RISKTABLE.RISK_PROBABILITY.value(t.getRiskProbability()),
					RISKTABLE.RISK_IMPACT.value(t.getRiskImpact()),
					RISKTABLE.RISK_EXPOSURE.value(t.getRiskExposure()),
					RISKTABLE.RISK_EXP_PHASE.value(t.getRiskExpPhase()),
					RISKTABLE.RISK_AVOIDANCE_A_P.value(t.getRiskAvoidanceAP()),
					RISKTABLE.RISK_MITIGATION_A_P.value(t.getRiskMitigationAP()),
					RISKTABLE.RISK_CONTINGENCY_A_P.value(t.getRiskContingencyAP()),
					RISKTABLE.RISK_ACTION_RESULT.value(t.getRiskActionResult()),
					RISKTABLE.RISK_OWNER.value(t.getRiskOwner()),
					RISKTABLE.RISK_STATUS.value(t.getRiskStatus()),
					RISKTABLE.RISK_CHECK_TRIGGER.value(t.getRiskCheckTrigger()),
					RISKTABLE.RISK_LAST_EDITED_BY.value(t.getRiskLastEditedBy()),
					RISKTABLE.RISK_PLAN_DATE.value(t.getRiskPlanDate()),
					RISKTABLE.RISK_LAST_EDIT_DATE.value(t.getRiskLastEditDate()),
					RISKTABLE.RISK_CLOSED_BY.value(t.getRiskClosedBy()),
					RISKTABLE.RISK_CLOSE_DATE.value(t.getRiskCloseDate()),
					RISKTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Risk insertObject(boolean autoGeneratedKeys ,Risk risk) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,risk, new InsertGenerateCallback<Risk>() {

			public Insert generate(Risk t) {
				Insert insert = insertInto(RISKTABLE).values(
					RISKTABLE.RISK_ID.value(t.getRiskId()),
					RISKTABLE.COMPANY_ID.value(t.getCompanyId()),
					RISKTABLE.PROJECT_ID.value(t.getProjectId()),
					RISKTABLE.RISK_OPENED_BY.value(t.getRiskOpenedBy()),
					RISKTABLE.RISK_OPEN_DATE.value(t.getRiskOpenDate()),
					RISKTABLE.RISK_TITLE.value(t.getRiskTitle()),
					RISKTABLE.RISK_SPEC.value(t.getRiskSpec()),
					RISKTABLE.RISK_CATEGORY.value(t.getRiskCategory()),
					RISKTABLE.RISK_PROBABILITY.value(t.getRiskProbability()),
					RISKTABLE.RISK_IMPACT.value(t.getRiskImpact()),
					RISKTABLE.RISK_EXPOSURE.value(t.getRiskExposure()),
					RISKTABLE.RISK_EXP_PHASE.value(t.getRiskExpPhase()),
					RISKTABLE.RISK_AVOIDANCE_A_P.value(t.getRiskAvoidanceAP()),
					RISKTABLE.RISK_MITIGATION_A_P.value(t.getRiskMitigationAP()),
					RISKTABLE.RISK_CONTINGENCY_A_P.value(t.getRiskContingencyAP()),
					RISKTABLE.RISK_ACTION_RESULT.value(t.getRiskActionResult()),
					RISKTABLE.RISK_OWNER.value(t.getRiskOwner()),
					RISKTABLE.RISK_STATUS.value(t.getRiskStatus()),
					RISKTABLE.RISK_CHECK_TRIGGER.value(t.getRiskCheckTrigger()),
					RISKTABLE.RISK_LAST_EDITED_BY.value(t.getRiskLastEditedBy()),
					RISKTABLE.RISK_PLAN_DATE.value(t.getRiskPlanDate()),
					RISKTABLE.RISK_LAST_EDIT_DATE.value(t.getRiskLastEditDate()),
					RISKTABLE.RISK_CLOSED_BY.value(t.getRiskClosedBy()),
					RISKTABLE.RISK_CLOSE_DATE.value(t.getRiskCloseDate()),
					RISKTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Risk risk) {
		return getDslTemplate().updateObject(risk, new UpdateGenerateCallback<Risk>() {
			public Update generate(Risk t) {
				Update update = update(RISKTABLE).set(
					RISKTABLE.COMPANY_ID.value(t.getCompanyId()),
					RISKTABLE.PROJECT_ID.value(t.getProjectId()),
					RISKTABLE.RISK_OPENED_BY.value(t.getRiskOpenedBy()),
					RISKTABLE.RISK_OPEN_DATE.value(t.getRiskOpenDate()),
					RISKTABLE.RISK_TITLE.value(t.getRiskTitle()),
					RISKTABLE.RISK_SPEC.value(t.getRiskSpec()),
					RISKTABLE.RISK_CATEGORY.value(t.getRiskCategory()),
					RISKTABLE.RISK_PROBABILITY.value(t.getRiskProbability()),
					RISKTABLE.RISK_IMPACT.value(t.getRiskImpact()),
					RISKTABLE.RISK_EXPOSURE.value(t.getRiskExposure()),
					RISKTABLE.RISK_EXP_PHASE.value(t.getRiskExpPhase()),
					RISKTABLE.RISK_AVOIDANCE_A_P.value(t.getRiskAvoidanceAP()),
					RISKTABLE.RISK_MITIGATION_A_P.value(t.getRiskMitigationAP()),
					RISKTABLE.RISK_CONTINGENCY_A_P.value(t.getRiskContingencyAP()),
					RISKTABLE.RISK_ACTION_RESULT.value(t.getRiskActionResult()),
					RISKTABLE.RISK_OWNER.value(t.getRiskOwner()),
					RISKTABLE.RISK_STATUS.value(t.getRiskStatus()),
					RISKTABLE.RISK_CHECK_TRIGGER.value(t.getRiskCheckTrigger()),
					RISKTABLE.RISK_LAST_EDITED_BY.value(t.getRiskLastEditedBy()),
					RISKTABLE.RISK_PLAN_DATE.value(t.getRiskPlanDate()),
					RISKTABLE.RISK_LAST_EDIT_DATE.value(t.getRiskLastEditDate()),
					RISKTABLE.RISK_CLOSED_BY.value(t.getRiskClosedBy()),
					RISKTABLE.RISK_CLOSE_DATE.value(t.getRiskCloseDate()),
					RISKTABLE.DELETED.value(t.getDeleted())).where(
					RISKTABLE.RISK_ID.eq(t.getRiskId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(RISKTABLE).where(RISKTABLE.RISK_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(RISKTABLE).where(RISKTABLE.RISK_ID.in(t));
		}
		},pks);
	}

	public Risk getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Risk.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(RISKTABLE).where(RISKTABLE.RISK_ID.eq(t));
			}
		});
	}

	public List<Risk> queryObjects(Risk risk) {
		if(risk==null){
			risk=new Risk();
		}
		return getDslTemplate().queryObjects(risk, new SelectGenerateCallback<Risk>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Risk t) {
				return selectFrom(RISKTABLE).where(
				and(
					RISKTABLE.COMPANY_ID.eq(t.getCompanyId()),
					RISKTABLE.PROJECT_ID.eq(t.getProjectId()),
					RISKTABLE.RISK_OPENED_BY.eq(t.getRiskOpenedBy()),
					RISKTABLE.RISK_OPEN_DATE.eq(t.getRiskOpenDate()),
					RISKTABLE.RISK_TITLE.eq(t.getRiskTitle()),
					RISKTABLE.RISK_SPEC.eq(t.getRiskSpec()),
					RISKTABLE.RISK_CATEGORY.eq(t.getRiskCategory()),
					RISKTABLE.RISK_PROBABILITY.eq(t.getRiskProbability()),
					RISKTABLE.RISK_IMPACT.eq(t.getRiskImpact()),
					RISKTABLE.RISK_EXPOSURE.eq(t.getRiskExposure()),
					RISKTABLE.RISK_EXP_PHASE.eq(t.getRiskExpPhase()),
					RISKTABLE.RISK_AVOIDANCE_A_P.eq(t.getRiskAvoidanceAP()),
					RISKTABLE.RISK_MITIGATION_A_P.eq(t.getRiskMitigationAP()),
					RISKTABLE.RISK_CONTINGENCY_A_P.eq(t.getRiskContingencyAP()),
					RISKTABLE.RISK_ACTION_RESULT.eq(t.getRiskActionResult()),
					RISKTABLE.RISK_OWNER.eq(t.getRiskOwner()),
					RISKTABLE.RISK_STATUS.eq(t.getRiskStatus()),
					RISKTABLE.RISK_CHECK_TRIGGER.eq(t.getRiskCheckTrigger()),
					RISKTABLE.RISK_LAST_EDITED_BY.eq(t.getRiskLastEditedBy()),
					RISKTABLE.RISK_PLAN_DATE.eq(t.getRiskPlanDate()),
					RISKTABLE.RISK_LAST_EDIT_DATE.eq(t.getRiskLastEditDate()),
					RISKTABLE.RISK_CLOSED_BY.eq(t.getRiskClosedBy()),
					RISKTABLE.RISK_CLOSE_DATE.eq(t.getRiskCloseDate()),
					RISKTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Risk> queryObjectsForPage(int start,int limit ,Risk risk) {
		if(risk==null){
			risk=new Risk();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, risk, false, new SelectGenerateCallback<Risk>() {

			public Select generate(Risk t) {
				return MysqlSelect.selectFrom(RISKTABLE).where(
				and(
					RISKTABLE.COMPANY_ID.eq(t.getCompanyId()),
					RISKTABLE.PROJECT_ID.eq(t.getProjectId()),
					RISKTABLE.RISK_OPENED_BY.eq(t.getRiskOpenedBy()),
					RISKTABLE.RISK_OPEN_DATE.eq(t.getRiskOpenDate()),
					RISKTABLE.RISK_TITLE.eq(t.getRiskTitle()),
					RISKTABLE.RISK_SPEC.eq(t.getRiskSpec()),
					RISKTABLE.RISK_CATEGORY.eq(t.getRiskCategory()),
					RISKTABLE.RISK_PROBABILITY.eq(t.getRiskProbability()),
					RISKTABLE.RISK_IMPACT.eq(t.getRiskImpact()),
					RISKTABLE.RISK_EXPOSURE.eq(t.getRiskExposure()),
					RISKTABLE.RISK_EXP_PHASE.eq(t.getRiskExpPhase()),
					RISKTABLE.RISK_AVOIDANCE_A_P.eq(t.getRiskAvoidanceAP()),
					RISKTABLE.RISK_MITIGATION_A_P.eq(t.getRiskMitigationAP()),
					RISKTABLE.RISK_CONTINGENCY_A_P.eq(t.getRiskContingencyAP()),
					RISKTABLE.RISK_ACTION_RESULT.eq(t.getRiskActionResult()),
					RISKTABLE.RISK_OWNER.eq(t.getRiskOwner()),
					RISKTABLE.RISK_STATUS.eq(t.getRiskStatus()),
					RISKTABLE.RISK_CHECK_TRIGGER.eq(t.getRiskCheckTrigger()),
					RISKTABLE.RISK_LAST_EDITED_BY.eq(t.getRiskLastEditedBy()),
					RISKTABLE.RISK_PLAN_DATE.eq(t.getRiskPlanDate()),
					RISKTABLE.RISK_LAST_EDIT_DATE.eq(t.getRiskLastEditDate()),
					RISKTABLE.RISK_CLOSED_BY.eq(t.getRiskClosedBy()),
					RISKTABLE.RISK_CLOSE_DATE.eq(t.getRiskCloseDate()),
					RISKTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Risk> risks) {
		if (CollectionUtil.isEmpty(risks)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, risks, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(RISKTABLE).values(
					RISKTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					RISKTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					RISKTABLE.RISK_OPENED_BY.value(new JdbcNamedParameter("riskOpenedBy")),
					RISKTABLE.RISK_OPEN_DATE.value(new JdbcNamedParameter("riskOpenDate")),
					RISKTABLE.RISK_TITLE.value(new JdbcNamedParameter("riskTitle")),
					RISKTABLE.RISK_SPEC.value(new JdbcNamedParameter("riskSpec")),
					RISKTABLE.RISK_CATEGORY.value(new JdbcNamedParameter("riskCategory")),
					RISKTABLE.RISK_PROBABILITY.value(new JdbcNamedParameter("riskProbability")),
					RISKTABLE.RISK_IMPACT.value(new JdbcNamedParameter("riskImpact")),
					RISKTABLE.RISK_EXPOSURE.value(new JdbcNamedParameter("riskExposure")),
					RISKTABLE.RISK_EXP_PHASE.value(new JdbcNamedParameter("riskExpPhase")),
					RISKTABLE.RISK_AVOIDANCE_A_P.value(new JdbcNamedParameter("riskAvoidanceAP")),
					RISKTABLE.RISK_MITIGATION_A_P.value(new JdbcNamedParameter("riskMitigationAP")),
					RISKTABLE.RISK_CONTINGENCY_A_P.value(new JdbcNamedParameter("riskContingencyAP")),
					RISKTABLE.RISK_ACTION_RESULT.value(new JdbcNamedParameter("riskActionResult")),
					RISKTABLE.RISK_OWNER.value(new JdbcNamedParameter("riskOwner")),
					RISKTABLE.RISK_STATUS.value(new JdbcNamedParameter("riskStatus")),
					RISKTABLE.RISK_CHECK_TRIGGER.value(new JdbcNamedParameter("riskCheckTrigger")),
					RISKTABLE.RISK_LAST_EDITED_BY.value(new JdbcNamedParameter("riskLastEditedBy")),
					RISKTABLE.RISK_PLAN_DATE.value(new JdbcNamedParameter("riskPlanDate")),
					RISKTABLE.RISK_LAST_EDIT_DATE.value(new JdbcNamedParameter("riskLastEditDate")),
					RISKTABLE.RISK_CLOSED_BY.value(new JdbcNamedParameter("riskClosedBy")),
					RISKTABLE.RISK_CLOSE_DATE.value(new JdbcNamedParameter("riskCloseDate")),
					RISKTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Risk> risks){
			return batchInsert(true ,risks);
	}

	public int[] batchUpdate(List<Risk> risks) {
		if (CollectionUtil.isEmpty(risks)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(risks, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(RISKTABLE).set(
					RISKTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					RISKTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					RISKTABLE.RISK_OPENED_BY.value(new JdbcNamedParameter("riskOpenedBy")),
					RISKTABLE.RISK_OPEN_DATE.value(new JdbcNamedParameter("riskOpenDate")),
					RISKTABLE.RISK_TITLE.value(new JdbcNamedParameter("riskTitle")),
					RISKTABLE.RISK_SPEC.value(new JdbcNamedParameter("riskSpec")),
					RISKTABLE.RISK_CATEGORY.value(new JdbcNamedParameter("riskCategory")),
					RISKTABLE.RISK_PROBABILITY.value(new JdbcNamedParameter("riskProbability")),
					RISKTABLE.RISK_IMPACT.value(new JdbcNamedParameter("riskImpact")),
					RISKTABLE.RISK_EXPOSURE.value(new JdbcNamedParameter("riskExposure")),
					RISKTABLE.RISK_EXP_PHASE.value(new JdbcNamedParameter("riskExpPhase")),
					RISKTABLE.RISK_AVOIDANCE_A_P.value(new JdbcNamedParameter("riskAvoidanceAP")),
					RISKTABLE.RISK_MITIGATION_A_P.value(new JdbcNamedParameter("riskMitigationAP")),
					RISKTABLE.RISK_CONTINGENCY_A_P.value(new JdbcNamedParameter("riskContingencyAP")),
					RISKTABLE.RISK_ACTION_RESULT.value(new JdbcNamedParameter("riskActionResult")),
					RISKTABLE.RISK_OWNER.value(new JdbcNamedParameter("riskOwner")),
					RISKTABLE.RISK_STATUS.value(new JdbcNamedParameter("riskStatus")),
					RISKTABLE.RISK_CHECK_TRIGGER.value(new JdbcNamedParameter("riskCheckTrigger")),
					RISKTABLE.RISK_LAST_EDITED_BY.value(new JdbcNamedParameter("riskLastEditedBy")),
					RISKTABLE.RISK_PLAN_DATE.value(new JdbcNamedParameter("riskPlanDate")),
					RISKTABLE.RISK_LAST_EDIT_DATE.value(new JdbcNamedParameter("riskLastEditDate")),
					RISKTABLE.RISK_CLOSED_BY.value(new JdbcNamedParameter("riskClosedBy")),
					RISKTABLE.RISK_CLOSE_DATE.value(new JdbcNamedParameter("riskCloseDate")),
					RISKTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				RISKTABLE.RISK_ID.eq(new JdbcNamedParameter("riskId")));
			}
		});
	}

	public int[] batchDelete(List<Risk> risks) {
		if (CollectionUtil.isEmpty(risks)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(risks, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(RISKTABLE).where(and(
				RISKTABLE.RISK_ID.eq(new JdbcNamedParameter("riskId")),
				RISKTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				RISKTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				RISKTABLE.RISK_OPENED_BY.eq(new JdbcNamedParameter("riskOpenedBy")),
				RISKTABLE.RISK_OPEN_DATE.eq(new JdbcNamedParameter("riskOpenDate")),
				RISKTABLE.RISK_TITLE.eq(new JdbcNamedParameter("riskTitle")),
				RISKTABLE.RISK_SPEC.eq(new JdbcNamedParameter("riskSpec")),
				RISKTABLE.RISK_CATEGORY.eq(new JdbcNamedParameter("riskCategory")),
				RISKTABLE.RISK_PROBABILITY.eq(new JdbcNamedParameter("riskProbability")),
				RISKTABLE.RISK_IMPACT.eq(new JdbcNamedParameter("riskImpact")),
				RISKTABLE.RISK_EXPOSURE.eq(new JdbcNamedParameter("riskExposure")),
				RISKTABLE.RISK_EXP_PHASE.eq(new JdbcNamedParameter("riskExpPhase")),
				RISKTABLE.RISK_AVOIDANCE_A_P.eq(new JdbcNamedParameter("riskAvoidanceAP")),
				RISKTABLE.RISK_MITIGATION_A_P.eq(new JdbcNamedParameter("riskMitigationAP")),
				RISKTABLE.RISK_CONTINGENCY_A_P.eq(new JdbcNamedParameter("riskContingencyAP")),
				RISKTABLE.RISK_ACTION_RESULT.eq(new JdbcNamedParameter("riskActionResult")),
				RISKTABLE.RISK_OWNER.eq(new JdbcNamedParameter("riskOwner")),
				RISKTABLE.RISK_STATUS.eq(new JdbcNamedParameter("riskStatus")),
				RISKTABLE.RISK_CHECK_TRIGGER.eq(new JdbcNamedParameter("riskCheckTrigger")),
				RISKTABLE.RISK_LAST_EDITED_BY.eq(new JdbcNamedParameter("riskLastEditedBy")),
				RISKTABLE.RISK_PLAN_DATE.eq(new JdbcNamedParameter("riskPlanDate")),
				RISKTABLE.RISK_LAST_EDIT_DATE.eq(new JdbcNamedParameter("riskLastEditDate")),
				RISKTABLE.RISK_CLOSED_BY.eq(new JdbcNamedParameter("riskClosedBy")),
				RISKTABLE.RISK_CLOSE_DATE.eq(new JdbcNamedParameter("riskCloseDate")),
				RISKTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
