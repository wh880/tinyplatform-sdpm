/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.project.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.project.constant.ProjectTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.project.pojo.Project;
import org.tinygroup.sdpm.project.inter.ProjectDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class ProjectDaoImpl extends TinyDslDaoSupport implements ProjectDao {

	public Project insertObject(Project project) {
		return getDslTemplate().insertObject(project, new InsertGenerateCallback<Project>() {
			public Insert generate(Project t) {
				Insert insert = insertInto(PROJECTTABLE).values(
					PROJECTTABLE.PROJECT_ID.value(t.getProjectId()),
					PROJECTTABLE.PROGRAM_ID.value(t.getProgramId()),
					PROJECTTABLE.PORTFOLIO_ID.value(t.getPortfolioId()),
					PROJECTTABLE.COMPANY_ID.value(t.getCompanyId()),
					PROJECTTABLE.DEPT_ID.value(t.getDeptId()),
					PROJECTTABLE.PROJECT_TYPE.value(t.getProjectType()),
					PROJECTTABLE.PROJECT_PARENT.value(t.getProjectParent()),
					PROJECTTABLE.PROJECT_NAME.value(t.getProjectName()),
					PROJECTTABLE.PROJECT_CODE.value(t.getProjectCode()),
					PROJECTTABLE.PROJECT_ORDER.value(t.getProjectOrder()),
					PROJECTTABLE.PROJECT_BEGIN.value(t.getProjectBegin()),
					PROJECTTABLE.PROJECT_END.value(t.getProjectEnd()),
					PROJECTTABLE.PROJECT_DAYS.value(t.getProjectDays()),
					PROJECTTABLE.PROJECT_STATUS.value(t.getProjectStatus()),
					PROJECTTABLE.PROJECT_STAGE.value(t.getProjectStage()),
					PROJECTTABLE.PROJECT_PRI.value(t.getProjectPri()),
					PROJECTTABLE.PROJECT_DESC.value(t.getProjectDesc()),
					PROJECTTABLE.PROJECT_GOAL.value(t.getProjectGoal()),
					PROJECTTABLE.PROJECT_OPENED_BY.value(t.getProjectOpenedBy()),
					PROJECTTABLE.PROJECT_OPENED_DATE.value(t.getProjectOpenedDate()),
					PROJECTTABLE.PROJECT_CLOSED_BY.value(t.getProjectClosedBy()),
					PROJECTTABLE.PROJECT_CLOSED_DATE.value(t.getProjectClosedDate()),
					PROJECTTABLE.PROJECT_CANCELED_BY.value(t.getProjectCanceledBy()),
					PROJECTTABLE.PROJECT_CANCELED_DATE.value(t.getProjectCanceledDate()),
					PROJECTTABLE.PROJECT_MANAGER.value(t.getProjectManager()),
					PROJECTTABLE.QUALITY_MANAGER.value(t.getQualityManager()),
					PROJECTTABLE.DELIVERY_MANAGER.value(t.getDeliveryManager()),
					PROJECTTABLE.PROJECT_TEAM.value(t.getProjectTeam()),
					PROJECTTABLE.ACL.value(t.getAcl()),
					PROJECTTABLE.PROJECT_WHITELIST.value(t.getProjectWhitelist()),
					PROJECTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Project insertObject(boolean autoGeneratedKeys ,Project project) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,project, new InsertGenerateCallback<Project>() {

			public Insert generate(Project t) {
				Insert insert = insertInto(PROJECTTABLE).values(
					PROJECTTABLE.PROJECT_ID.value(t.getProjectId()),
					PROJECTTABLE.PROGRAM_ID.value(t.getProgramId()),
					PROJECTTABLE.PORTFOLIO_ID.value(t.getPortfolioId()),
					PROJECTTABLE.COMPANY_ID.value(t.getCompanyId()),
					PROJECTTABLE.DEPT_ID.value(t.getDeptId()),
					PROJECTTABLE.PROJECT_TYPE.value(t.getProjectType()),
					PROJECTTABLE.PROJECT_PARENT.value(t.getProjectParent()),
					PROJECTTABLE.PROJECT_NAME.value(t.getProjectName()),
					PROJECTTABLE.PROJECT_CODE.value(t.getProjectCode()),
					PROJECTTABLE.PROJECT_ORDER.value(t.getProjectOrder()),
					PROJECTTABLE.PROJECT_BEGIN.value(t.getProjectBegin()),
					PROJECTTABLE.PROJECT_END.value(t.getProjectEnd()),
					PROJECTTABLE.PROJECT_DAYS.value(t.getProjectDays()),
					PROJECTTABLE.PROJECT_STATUS.value(t.getProjectStatus()),
					PROJECTTABLE.PROJECT_STAGE.value(t.getProjectStage()),
					PROJECTTABLE.PROJECT_PRI.value(t.getProjectPri()),
					PROJECTTABLE.PROJECT_DESC.value(t.getProjectDesc()),
					PROJECTTABLE.PROJECT_GOAL.value(t.getProjectGoal()),
					PROJECTTABLE.PROJECT_OPENED_BY.value(t.getProjectOpenedBy()),
					PROJECTTABLE.PROJECT_OPENED_DATE.value(t.getProjectOpenedDate()),
					PROJECTTABLE.PROJECT_CLOSED_BY.value(t.getProjectClosedBy()),
					PROJECTTABLE.PROJECT_CLOSED_DATE.value(t.getProjectClosedDate()),
					PROJECTTABLE.PROJECT_CANCELED_BY.value(t.getProjectCanceledBy()),
					PROJECTTABLE.PROJECT_CANCELED_DATE.value(t.getProjectCanceledDate()),
					PROJECTTABLE.PROJECT_MANAGER.value(t.getProjectManager()),
					PROJECTTABLE.QUALITY_MANAGER.value(t.getQualityManager()),
					PROJECTTABLE.DELIVERY_MANAGER.value(t.getDeliveryManager()),
					PROJECTTABLE.PROJECT_TEAM.value(t.getProjectTeam()),
					PROJECTTABLE.ACL.value(t.getAcl()),
					PROJECTTABLE.PROJECT_WHITELIST.value(t.getProjectWhitelist()),
					PROJECTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Project project) {
		return getDslTemplate().updateObject(project, new UpdateGenerateCallback<Project>() {
			public Update generate(Project t) {
				Update update = update(PROJECTTABLE).set(
					PROJECTTABLE.PROGRAM_ID.value(t.getProgramId()),
					PROJECTTABLE.PORTFOLIO_ID.value(t.getPortfolioId()),
					PROJECTTABLE.COMPANY_ID.value(t.getCompanyId()),
					PROJECTTABLE.DEPT_ID.value(t.getDeptId()),
					PROJECTTABLE.PROJECT_TYPE.value(t.getProjectType()),
					PROJECTTABLE.PROJECT_PARENT.value(t.getProjectParent()),
					PROJECTTABLE.PROJECT_NAME.value(t.getProjectName()),
					PROJECTTABLE.PROJECT_CODE.value(t.getProjectCode()),
					PROJECTTABLE.PROJECT_ORDER.value(t.getProjectOrder()),
					PROJECTTABLE.PROJECT_BEGIN.value(t.getProjectBegin()),
					PROJECTTABLE.PROJECT_END.value(t.getProjectEnd()),
					PROJECTTABLE.PROJECT_DAYS.value(t.getProjectDays()),
					PROJECTTABLE.PROJECT_STATUS.value(t.getProjectStatus()),
					PROJECTTABLE.PROJECT_STAGE.value(t.getProjectStage()),
					PROJECTTABLE.PROJECT_PRI.value(t.getProjectPri()),
					PROJECTTABLE.PROJECT_DESC.value(t.getProjectDesc()),
					PROJECTTABLE.PROJECT_GOAL.value(t.getProjectGoal()),
					PROJECTTABLE.PROJECT_OPENED_BY.value(t.getProjectOpenedBy()),
					PROJECTTABLE.PROJECT_OPENED_DATE.value(t.getProjectOpenedDate()),
					PROJECTTABLE.PROJECT_CLOSED_BY.value(t.getProjectClosedBy()),
					PROJECTTABLE.PROJECT_CLOSED_DATE.value(t.getProjectClosedDate()),
					PROJECTTABLE.PROJECT_CANCELED_BY.value(t.getProjectCanceledBy()),
					PROJECTTABLE.PROJECT_CANCELED_DATE.value(t.getProjectCanceledDate()),
					PROJECTTABLE.PROJECT_MANAGER.value(t.getProjectManager()),
					PROJECTTABLE.QUALITY_MANAGER.value(t.getQualityManager()),
					PROJECTTABLE.DELIVERY_MANAGER.value(t.getDeliveryManager()),
					PROJECTTABLE.PROJECT_TEAM.value(t.getProjectTeam()),
					PROJECTTABLE.ACL.value(t.getAcl()),
					PROJECTTABLE.PROJECT_WHITELIST.value(t.getProjectWhitelist()),
					PROJECTTABLE.DELETED.value(t.getDeleted())).where(
					PROJECTTABLE.PROJECT_ID.eq(t.getProjectId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(PROJECTTABLE).where(PROJECTTABLE.PROJECT_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(PROJECTTABLE).where(PROJECTTABLE.PROJECT_ID.in(t));
		}
		},pks);
	}

	public Project getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Project.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(PROJECTTABLE).where(PROJECTTABLE.PROJECT_ID.eq(t));
			}
		});
	}

	public List<Project> queryObjects(Project project) {
		if(project==null){
			project=new Project();
		}
		return getDslTemplate().queryObjects(project, new SelectGenerateCallback<Project>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Project t) {
				return selectFrom(PROJECTTABLE).where(
				and(
					PROJECTTABLE.PROGRAM_ID.eq(t.getProgramId()),
					PROJECTTABLE.PORTFOLIO_ID.eq(t.getPortfolioId()),
					PROJECTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					PROJECTTABLE.DEPT_ID.eq(t.getDeptId()),
					PROJECTTABLE.PROJECT_TYPE.eq(t.getProjectType()),
					PROJECTTABLE.PROJECT_PARENT.eq(t.getProjectParent()),
					PROJECTTABLE.PROJECT_NAME.eq(t.getProjectName()),
					PROJECTTABLE.PROJECT_CODE.eq(t.getProjectCode()),
					PROJECTTABLE.PROJECT_ORDER.eq(t.getProjectOrder()),
					PROJECTTABLE.PROJECT_BEGIN.eq(t.getProjectBegin()),
					PROJECTTABLE.PROJECT_END.eq(t.getProjectEnd()),
					PROJECTTABLE.PROJECT_DAYS.eq(t.getProjectDays()),
					PROJECTTABLE.PROJECT_STATUS.eq(t.getProjectStatus()),
					PROJECTTABLE.PROJECT_STAGE.eq(t.getProjectStage()),
					PROJECTTABLE.PROJECT_PRI.eq(t.getProjectPri()),
					PROJECTTABLE.PROJECT_DESC.eq(t.getProjectDesc()),
					PROJECTTABLE.PROJECT_GOAL.eq(t.getProjectGoal()),
					PROJECTTABLE.PROJECT_OPENED_BY.eq(t.getProjectOpenedBy()),
					PROJECTTABLE.PROJECT_OPENED_DATE.eq(t.getProjectOpenedDate()),
					PROJECTTABLE.PROJECT_CLOSED_BY.eq(t.getProjectClosedBy()),
					PROJECTTABLE.PROJECT_CLOSED_DATE.eq(t.getProjectClosedDate()),
					PROJECTTABLE.PROJECT_CANCELED_BY.eq(t.getProjectCanceledBy()),
					PROJECTTABLE.PROJECT_CANCELED_DATE.eq(t.getProjectCanceledDate()),
					PROJECTTABLE.PROJECT_MANAGER.eq(t.getProjectManager()),
					PROJECTTABLE.QUALITY_MANAGER.eq(t.getQualityManager()),
					PROJECTTABLE.DELIVERY_MANAGER.eq(t.getDeliveryManager()),
					PROJECTTABLE.PROJECT_TEAM.eq(t.getProjectTeam()),
					PROJECTTABLE.ACL.eq(t.getAcl()),
					PROJECTTABLE.PROJECT_WHITELIST.eq(t.getProjectWhitelist()),
					PROJECTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Project> queryObjectsForPage(int start,int limit ,Project project) {
		if(project==null){
			project=new Project();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, project, false, new SelectGenerateCallback<Project>() {

			public Select generate(Project t) {
				return MysqlSelect.selectFrom(PROJECTTABLE).where(
				and(
					PROJECTTABLE.PROGRAM_ID.eq(t.getProgramId()),
					PROJECTTABLE.PORTFOLIO_ID.eq(t.getPortfolioId()),
					PROJECTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					PROJECTTABLE.DEPT_ID.eq(t.getDeptId()),
					PROJECTTABLE.PROJECT_TYPE.eq(t.getProjectType()),
					PROJECTTABLE.PROJECT_PARENT.eq(t.getProjectParent()),
					PROJECTTABLE.PROJECT_NAME.eq(t.getProjectName()),
					PROJECTTABLE.PROJECT_CODE.eq(t.getProjectCode()),
					PROJECTTABLE.PROJECT_ORDER.eq(t.getProjectOrder()),
					PROJECTTABLE.PROJECT_BEGIN.eq(t.getProjectBegin()),
					PROJECTTABLE.PROJECT_END.eq(t.getProjectEnd()),
					PROJECTTABLE.PROJECT_DAYS.eq(t.getProjectDays()),
					PROJECTTABLE.PROJECT_STATUS.eq(t.getProjectStatus()),
					PROJECTTABLE.PROJECT_STAGE.eq(t.getProjectStage()),
					PROJECTTABLE.PROJECT_PRI.eq(t.getProjectPri()),
					PROJECTTABLE.PROJECT_DESC.eq(t.getProjectDesc()),
					PROJECTTABLE.PROJECT_GOAL.eq(t.getProjectGoal()),
					PROJECTTABLE.PROJECT_OPENED_BY.eq(t.getProjectOpenedBy()),
					PROJECTTABLE.PROJECT_OPENED_DATE.eq(t.getProjectOpenedDate()),
					PROJECTTABLE.PROJECT_CLOSED_BY.eq(t.getProjectClosedBy()),
					PROJECTTABLE.PROJECT_CLOSED_DATE.eq(t.getProjectClosedDate()),
					PROJECTTABLE.PROJECT_CANCELED_BY.eq(t.getProjectCanceledBy()),
					PROJECTTABLE.PROJECT_CANCELED_DATE.eq(t.getProjectCanceledDate()),
					PROJECTTABLE.PROJECT_MANAGER.eq(t.getProjectManager()),
					PROJECTTABLE.QUALITY_MANAGER.eq(t.getQualityManager()),
					PROJECTTABLE.DELIVERY_MANAGER.eq(t.getDeliveryManager()),
					PROJECTTABLE.PROJECT_TEAM.eq(t.getProjectTeam()),
					PROJECTTABLE.ACL.eq(t.getAcl()),
					PROJECTTABLE.PROJECT_WHITELIST.eq(t.getProjectWhitelist()),
					PROJECTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Project> projects) {
		if (CollectionUtil.isEmpty(projects)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, projects, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(PROJECTTABLE).values(
					PROJECTTABLE.PROGRAM_ID.value(new JdbcNamedParameter("programId")),
					PROJECTTABLE.PORTFOLIO_ID.value(new JdbcNamedParameter("portfolioId")),
					PROJECTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					PROJECTTABLE.DEPT_ID.value(new JdbcNamedParameter("deptId")),
					PROJECTTABLE.PROJECT_TYPE.value(new JdbcNamedParameter("projectType")),
					PROJECTTABLE.PROJECT_PARENT.value(new JdbcNamedParameter("projectParent")),
					PROJECTTABLE.PROJECT_NAME.value(new JdbcNamedParameter("projectName")),
					PROJECTTABLE.PROJECT_CODE.value(new JdbcNamedParameter("projectCode")),
					PROJECTTABLE.PROJECT_ORDER.value(new JdbcNamedParameter("projectOrder")),
					PROJECTTABLE.PROJECT_BEGIN.value(new JdbcNamedParameter("projectBegin")),
					PROJECTTABLE.PROJECT_END.value(new JdbcNamedParameter("projectEnd")),
					PROJECTTABLE.PROJECT_DAYS.value(new JdbcNamedParameter("projectDays")),
					PROJECTTABLE.PROJECT_STATUS.value(new JdbcNamedParameter("projectStatus")),
					PROJECTTABLE.PROJECT_STAGE.value(new JdbcNamedParameter("projectStage")),
					PROJECTTABLE.PROJECT_PRI.value(new JdbcNamedParameter("projectPri")),
					PROJECTTABLE.PROJECT_DESC.value(new JdbcNamedParameter("projectDesc")),
					PROJECTTABLE.PROJECT_GOAL.value(new JdbcNamedParameter("projectGoal")),
					PROJECTTABLE.PROJECT_OPENED_BY.value(new JdbcNamedParameter("projectOpenedBy")),
					PROJECTTABLE.PROJECT_OPENED_DATE.value(new JdbcNamedParameter("projectOpenedDate")),
					PROJECTTABLE.PROJECT_CLOSED_BY.value(new JdbcNamedParameter("projectClosedBy")),
					PROJECTTABLE.PROJECT_CLOSED_DATE.value(new JdbcNamedParameter("projectClosedDate")),
					PROJECTTABLE.PROJECT_CANCELED_BY.value(new JdbcNamedParameter("projectCanceledBy")),
					PROJECTTABLE.PROJECT_CANCELED_DATE.value(new JdbcNamedParameter("projectCanceledDate")),
					PROJECTTABLE.PROJECT_MANAGER.value(new JdbcNamedParameter("projectManager")),
					PROJECTTABLE.QUALITY_MANAGER.value(new JdbcNamedParameter("qualityManager")),
					PROJECTTABLE.DELIVERY_MANAGER.value(new JdbcNamedParameter("deliveryManager")),
					PROJECTTABLE.PROJECT_TEAM.value(new JdbcNamedParameter("projectTeam")),
					PROJECTTABLE.ACL.value(new JdbcNamedParameter("acl")),
					PROJECTTABLE.PROJECT_WHITELIST.value(new JdbcNamedParameter("projectWhitelist")),
					PROJECTTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Project> projects){
			return batchInsert(true ,projects);
	}

	public int[] batchUpdate(List<Project> projects) {
		if (CollectionUtil.isEmpty(projects)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(projects, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(PROJECTTABLE).set(
					PROJECTTABLE.PROGRAM_ID.value(new JdbcNamedParameter("programId")),
					PROJECTTABLE.PORTFOLIO_ID.value(new JdbcNamedParameter("portfolioId")),
					PROJECTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					PROJECTTABLE.DEPT_ID.value(new JdbcNamedParameter("deptId")),
					PROJECTTABLE.PROJECT_TYPE.value(new JdbcNamedParameter("projectType")),
					PROJECTTABLE.PROJECT_PARENT.value(new JdbcNamedParameter("projectParent")),
					PROJECTTABLE.PROJECT_NAME.value(new JdbcNamedParameter("projectName")),
					PROJECTTABLE.PROJECT_CODE.value(new JdbcNamedParameter("projectCode")),
					PROJECTTABLE.PROJECT_ORDER.value(new JdbcNamedParameter("projectOrder")),
					PROJECTTABLE.PROJECT_BEGIN.value(new JdbcNamedParameter("projectBegin")),
					PROJECTTABLE.PROJECT_END.value(new JdbcNamedParameter("projectEnd")),
					PROJECTTABLE.PROJECT_DAYS.value(new JdbcNamedParameter("projectDays")),
					PROJECTTABLE.PROJECT_STATUS.value(new JdbcNamedParameter("projectStatus")),
					PROJECTTABLE.PROJECT_STAGE.value(new JdbcNamedParameter("projectStage")),
					PROJECTTABLE.PROJECT_PRI.value(new JdbcNamedParameter("projectPri")),
					PROJECTTABLE.PROJECT_DESC.value(new JdbcNamedParameter("projectDesc")),
					PROJECTTABLE.PROJECT_GOAL.value(new JdbcNamedParameter("projectGoal")),
					PROJECTTABLE.PROJECT_OPENED_BY.value(new JdbcNamedParameter("projectOpenedBy")),
					PROJECTTABLE.PROJECT_OPENED_DATE.value(new JdbcNamedParameter("projectOpenedDate")),
					PROJECTTABLE.PROJECT_CLOSED_BY.value(new JdbcNamedParameter("projectClosedBy")),
					PROJECTTABLE.PROJECT_CLOSED_DATE.value(new JdbcNamedParameter("projectClosedDate")),
					PROJECTTABLE.PROJECT_CANCELED_BY.value(new JdbcNamedParameter("projectCanceledBy")),
					PROJECTTABLE.PROJECT_CANCELED_DATE.value(new JdbcNamedParameter("projectCanceledDate")),
					PROJECTTABLE.PROJECT_MANAGER.value(new JdbcNamedParameter("projectManager")),
					PROJECTTABLE.QUALITY_MANAGER.value(new JdbcNamedParameter("qualityManager")),
					PROJECTTABLE.DELIVERY_MANAGER.value(new JdbcNamedParameter("deliveryManager")),
					PROJECTTABLE.PROJECT_TEAM.value(new JdbcNamedParameter("projectTeam")),
					PROJECTTABLE.ACL.value(new JdbcNamedParameter("acl")),
					PROJECTTABLE.PROJECT_WHITELIST.value(new JdbcNamedParameter("projectWhitelist")),
					PROJECTTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				PROJECTTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")));
			}
		});
	}

	public int[] batchDelete(List<Project> projects) {
		if (CollectionUtil.isEmpty(projects)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(projects, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(PROJECTTABLE).where(and(
				PROJECTTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				PROJECTTABLE.PROGRAM_ID.eq(new JdbcNamedParameter("programId")),
				PROJECTTABLE.PORTFOLIO_ID.eq(new JdbcNamedParameter("portfolioId")),
				PROJECTTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				PROJECTTABLE.DEPT_ID.eq(new JdbcNamedParameter("deptId")),
				PROJECTTABLE.PROJECT_TYPE.eq(new JdbcNamedParameter("projectType")),
				PROJECTTABLE.PROJECT_PARENT.eq(new JdbcNamedParameter("projectParent")),
				PROJECTTABLE.PROJECT_NAME.eq(new JdbcNamedParameter("projectName")),
				PROJECTTABLE.PROJECT_CODE.eq(new JdbcNamedParameter("projectCode")),
				PROJECTTABLE.PROJECT_ORDER.eq(new JdbcNamedParameter("projectOrder")),
				PROJECTTABLE.PROJECT_BEGIN.eq(new JdbcNamedParameter("projectBegin")),
				PROJECTTABLE.PROJECT_END.eq(new JdbcNamedParameter("projectEnd")),
				PROJECTTABLE.PROJECT_DAYS.eq(new JdbcNamedParameter("projectDays")),
				PROJECTTABLE.PROJECT_STATUS.eq(new JdbcNamedParameter("projectStatus")),
				PROJECTTABLE.PROJECT_STAGE.eq(new JdbcNamedParameter("projectStage")),
				PROJECTTABLE.PROJECT_PRI.eq(new JdbcNamedParameter("projectPri")),
				PROJECTTABLE.PROJECT_DESC.eq(new JdbcNamedParameter("projectDesc")),
				PROJECTTABLE.PROJECT_GOAL.eq(new JdbcNamedParameter("projectGoal")),
				PROJECTTABLE.PROJECT_OPENED_BY.eq(new JdbcNamedParameter("projectOpenedBy")),
				PROJECTTABLE.PROJECT_OPENED_DATE.eq(new JdbcNamedParameter("projectOpenedDate")),
				PROJECTTABLE.PROJECT_CLOSED_BY.eq(new JdbcNamedParameter("projectClosedBy")),
				PROJECTTABLE.PROJECT_CLOSED_DATE.eq(new JdbcNamedParameter("projectClosedDate")),
				PROJECTTABLE.PROJECT_CANCELED_BY.eq(new JdbcNamedParameter("projectCanceledBy")),
				PROJECTTABLE.PROJECT_CANCELED_DATE.eq(new JdbcNamedParameter("projectCanceledDate")),
				PROJECTTABLE.PROJECT_MANAGER.eq(new JdbcNamedParameter("projectManager")),
				PROJECTTABLE.QUALITY_MANAGER.eq(new JdbcNamedParameter("qualityManager")),
				PROJECTTABLE.DELIVERY_MANAGER.eq(new JdbcNamedParameter("deliveryManager")),
				PROJECTTABLE.PROJECT_TEAM.eq(new JdbcNamedParameter("projectTeam")),
				PROJECTTABLE.ACL.eq(new JdbcNamedParameter("acl")),
				PROJECTTABLE.PROJECT_WHITELIST.eq(new JdbcNamedParameter("projectWhitelist")),
				PROJECTTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
