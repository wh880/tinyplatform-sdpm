/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.project.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.project.constant.TeamMemberTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.project.pojo.TeamMember;
import org.tinygroup.sdpm.project.inter.TeamMemberDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class TeamMemberDaoImpl extends TinyDslDaoSupport implements TeamMemberDao {

	public TeamMember insertObject(TeamMember teamMember) {
		return getDslTemplate().insertObject(teamMember, new InsertGenerateCallback<TeamMember>() {
			public Insert generate(TeamMember t) {
				Insert insert = insertInto(TEAMMEMBERTABLE).values(
					TEAMMEMBERTABLE.TEAM_MEMBER_ID.value(t.getTeamMemberId()),
					TEAMMEMBERTABLE.PROJECT_ID.value(t.getProjectId()),
					TEAMMEMBERTABLE.COMPANY_ID.value(t.getCompanyId()),
					TEAMMEMBERTABLE.USER_ACCOUNT.value(t.getUserAccount()),
					TEAMMEMBERTABLE.TEAM_ROLE.value(t.getTeamRole()),
					TEAMMEMBERTABLE.TEAM_JOIN.value(t.getTeamJoin()),
					TEAMMEMBERTABLE.TEAM_LEAVE.value(t.getTeamLeave()),
					TEAMMEMBERTABLE.TEAM_DAYS.value(t.getTeamDays()),
					TEAMMEMBERTABLE.TEAM_HOURS.value(t.getTeamHours()));
				return insert;
			}
		});
	}

	public TeamMember insertObject(boolean autoGeneratedKeys ,TeamMember teamMember) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,teamMember, new InsertGenerateCallback<TeamMember>() {

			public Insert generate(TeamMember t) {
				Insert insert = insertInto(TEAMMEMBERTABLE).values(
					TEAMMEMBERTABLE.TEAM_MEMBER_ID.value(t.getTeamMemberId()),
					TEAMMEMBERTABLE.PROJECT_ID.value(t.getProjectId()),
					TEAMMEMBERTABLE.COMPANY_ID.value(t.getCompanyId()),
					TEAMMEMBERTABLE.USER_ACCOUNT.value(t.getUserAccount()),
					TEAMMEMBERTABLE.TEAM_ROLE.value(t.getTeamRole()),
					TEAMMEMBERTABLE.TEAM_JOIN.value(t.getTeamJoin()),
					TEAMMEMBERTABLE.TEAM_LEAVE.value(t.getTeamLeave()),
					TEAMMEMBERTABLE.TEAM_DAYS.value(t.getTeamDays()),
					TEAMMEMBERTABLE.TEAM_HOURS.value(t.getTeamHours()));
				return insert;
			}
		});
	}

	public int updateObject(TeamMember teamMember) {
		return getDslTemplate().updateObject(teamMember, new UpdateGenerateCallback<TeamMember>() {
			public Update generate(TeamMember t) {
				Update update = update(TEAMMEMBERTABLE).set(
					TEAMMEMBERTABLE.PROJECT_ID.value(t.getProjectId()),
					TEAMMEMBERTABLE.COMPANY_ID.value(t.getCompanyId()),
					TEAMMEMBERTABLE.USER_ACCOUNT.value(t.getUserAccount()),
					TEAMMEMBERTABLE.TEAM_ROLE.value(t.getTeamRole()),
					TEAMMEMBERTABLE.TEAM_JOIN.value(t.getTeamJoin()),
					TEAMMEMBERTABLE.TEAM_LEAVE.value(t.getTeamLeave()),
					TEAMMEMBERTABLE.TEAM_DAYS.value(t.getTeamDays()),
					TEAMMEMBERTABLE.TEAM_HOURS.value(t.getTeamHours())).where(
					TEAMMEMBERTABLE.TEAM_MEMBER_ID.eq(t.getTeamMemberId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(TEAMMEMBERTABLE).where(TEAMMEMBERTABLE.TEAM_MEMBER_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(TEAMMEMBERTABLE).where(TEAMMEMBERTABLE.TEAM_MEMBER_ID.in(t));
		}
		},pks);
	}

	public TeamMember getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, TeamMember.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(TEAMMEMBERTABLE).where(TEAMMEMBERTABLE.TEAM_MEMBER_ID.eq(t));
			}
		});
	}

	public List<TeamMember> queryObjects(TeamMember teamMember) {
		if(teamMember==null){
			teamMember=new TeamMember();
		}
		return getDslTemplate().queryObjects(teamMember, new SelectGenerateCallback<TeamMember>() {

			@SuppressWarnings("rawtypes")
			public Select generate(TeamMember t) {
				return selectFrom(TEAMMEMBERTABLE).where(
				and(
					TEAMMEMBERTABLE.PROJECT_ID.eq(t.getProjectId()),
					TEAMMEMBERTABLE.COMPANY_ID.eq(t.getCompanyId()),
					TEAMMEMBERTABLE.USER_ACCOUNT.eq(t.getUserAccount()),
					TEAMMEMBERTABLE.TEAM_ROLE.eq(t.getTeamRole()),
					TEAMMEMBERTABLE.TEAM_JOIN.eq(t.getTeamJoin()),
					TEAMMEMBERTABLE.TEAM_LEAVE.eq(t.getTeamLeave()),
					TEAMMEMBERTABLE.TEAM_DAYS.eq(t.getTeamDays()),
					TEAMMEMBERTABLE.TEAM_HOURS.eq(t.getTeamHours())));
			}
		});
	}

	public Pager<TeamMember> queryObjectsForPage(int start,int limit ,TeamMember teamMember) {
		if(teamMember==null){
			teamMember=new TeamMember();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, teamMember, false, new SelectGenerateCallback<TeamMember>() {

			public Select generate(TeamMember t) {
				return MysqlSelect.selectFrom(TEAMMEMBERTABLE).where(
				and(
					TEAMMEMBERTABLE.PROJECT_ID.eq(t.getProjectId()),
					TEAMMEMBERTABLE.COMPANY_ID.eq(t.getCompanyId()),
					TEAMMEMBERTABLE.USER_ACCOUNT.eq(t.getUserAccount()),
					TEAMMEMBERTABLE.TEAM_ROLE.eq(t.getTeamRole()),
					TEAMMEMBERTABLE.TEAM_JOIN.eq(t.getTeamJoin()),
					TEAMMEMBERTABLE.TEAM_LEAVE.eq(t.getTeamLeave()),
					TEAMMEMBERTABLE.TEAM_DAYS.eq(t.getTeamDays()),
					TEAMMEMBERTABLE.TEAM_HOURS.eq(t.getTeamHours())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<TeamMember> teamMembers) {
		if (CollectionUtil.isEmpty(teamMembers)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, teamMembers, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(TEAMMEMBERTABLE).values(
					TEAMMEMBERTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					TEAMMEMBERTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					TEAMMEMBERTABLE.USER_ACCOUNT.value(new JdbcNamedParameter("userAccount")),
					TEAMMEMBERTABLE.TEAM_ROLE.value(new JdbcNamedParameter("teamRole")),
					TEAMMEMBERTABLE.TEAM_JOIN.value(new JdbcNamedParameter("teamJoin")),
					TEAMMEMBERTABLE.TEAM_LEAVE.value(new JdbcNamedParameter("teamLeave")),
					TEAMMEMBERTABLE.TEAM_DAYS.value(new JdbcNamedParameter("teamDays")),
					TEAMMEMBERTABLE.TEAM_HOURS.value(new JdbcNamedParameter("teamHours")));
			}
		});
	}

	public int[] batchInsert(List<TeamMember> teamMembers){
			return batchInsert(true ,teamMembers);
	}

	public int[] batchUpdate(List<TeamMember> teamMembers) {
		if (CollectionUtil.isEmpty(teamMembers)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(teamMembers, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(TEAMMEMBERTABLE).set(
					TEAMMEMBERTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					TEAMMEMBERTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					TEAMMEMBERTABLE.USER_ACCOUNT.value(new JdbcNamedParameter("userAccount")),
					TEAMMEMBERTABLE.TEAM_ROLE.value(new JdbcNamedParameter("teamRole")),
					TEAMMEMBERTABLE.TEAM_JOIN.value(new JdbcNamedParameter("teamJoin")),
					TEAMMEMBERTABLE.TEAM_LEAVE.value(new JdbcNamedParameter("teamLeave")),
					TEAMMEMBERTABLE.TEAM_DAYS.value(new JdbcNamedParameter("teamDays")),
					TEAMMEMBERTABLE.TEAM_HOURS.value(new JdbcNamedParameter("teamHours"))).where(
				TEAMMEMBERTABLE.TEAM_MEMBER_ID.eq(new JdbcNamedParameter("teamMemberId")));
			}
		});
	}

	public int[] batchDelete(List<TeamMember> teamMembers) {
		if (CollectionUtil.isEmpty(teamMembers)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(teamMembers, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(TEAMMEMBERTABLE).where(and(
				TEAMMEMBERTABLE.TEAM_MEMBER_ID.eq(new JdbcNamedParameter("teamMemberId")),
				TEAMMEMBERTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				TEAMMEMBERTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				TEAMMEMBERTABLE.USER_ACCOUNT.eq(new JdbcNamedParameter("userAccount")),
				TEAMMEMBERTABLE.TEAM_ROLE.eq(new JdbcNamedParameter("teamRole")),
				TEAMMEMBERTABLE.TEAM_JOIN.eq(new JdbcNamedParameter("teamJoin")),
				TEAMMEMBERTABLE.TEAM_LEAVE.eq(new JdbcNamedParameter("teamLeave")),
				TEAMMEMBERTABLE.TEAM_DAYS.eq(new JdbcNamedParameter("teamDays")),
				TEAMMEMBERTABLE.TEAM_HOURS.eq(new JdbcNamedParameter("teamHours"))));
			}
		});
	}

}
