/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.report.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.report.constant.ServiceReportTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.report.pojo.ServiceReport;
import org.tinygroup.sdpm.report.inter.ServiceReportDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class ServiceReportDaoImpl extends TinyDslDaoSupport implements ServiceReportDao {

	public ServiceReport insertObject(ServiceReport serviceReport) {
		return getDslTemplate().insertObject(serviceReport, new InsertGenerateCallback<ServiceReport>() {
			public Insert generate(ServiceReport t) {
				Insert insert = insertInto(SERVICEREPORTTABLE).values(
					SERVICEREPORTTABLE.SR_ID.value(t.getSrId()),
					SERVICEREPORTTABLE.SR_TITLE.value(t.getSrTitle()),
					SERVICEREPORTTABLE.SR_TYPE.value(t.getSrType()),
					SERVICEREPORTTABLE.SR_END_DATE.value(t.getSrEndDate()),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.value(t.getSrBeginDate()),
					SERVICEREPORTTABLE.SR_CREATE_BY.value(t.getSrCreateBy()),
					SERVICEREPORTTABLE.SR_CREATE_DATE.value(t.getSrCreateDate()),
					SERVICEREPORTTABLE.COMPANY_ID.value(t.getCompanyId()),
					SERVICEREPORTTABLE.DEPT_ID.value(t.getDeptId()),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.value(t.getProductlineName()),
					SERVICEREPORTTABLE.PRODUCT_NAME.value(t.getProductName()),
					SERVICEREPORTTABLE.REQUEST_COUNT.value(t.getRequestCount()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.value(t.getRequestCountClient()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.value(t.getRequestCountReplyIntime()),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.value(t.getRequestCountCommit()),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.value(t.getRequestCountExpired()),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.value(t.getRequestCountReleased()),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.value(t.getRequestCommitSpan()),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.value(t.getRequestReleaseSpan()),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.value(t.getRequestCountBug()),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.value(t.getRequestCountNReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.value(t.getRequestCountCReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.value(t.getRequestCountNeedReview()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.value(t.getRequestCountReviewed()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.value(t.getRequestCountReviewedPass()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.value(t.getRequestCountClientFeedBack()),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.value(t.getRequestCountAddUp()),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.value(t.getRequestScoreTotal()),
					SERVICEREPORTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public ServiceReport insertObject(boolean autoGeneratedKeys ,ServiceReport serviceReport) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,serviceReport, new InsertGenerateCallback<ServiceReport>() {

			public Insert generate(ServiceReport t) {
				Insert insert = insertInto(SERVICEREPORTTABLE).values(
					SERVICEREPORTTABLE.SR_ID.value(t.getSrId()),
					SERVICEREPORTTABLE.SR_TITLE.value(t.getSrTitle()),
					SERVICEREPORTTABLE.SR_TYPE.value(t.getSrType()),
					SERVICEREPORTTABLE.SR_END_DATE.value(t.getSrEndDate()),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.value(t.getSrBeginDate()),
					SERVICEREPORTTABLE.SR_CREATE_BY.value(t.getSrCreateBy()),
					SERVICEREPORTTABLE.SR_CREATE_DATE.value(t.getSrCreateDate()),
					SERVICEREPORTTABLE.COMPANY_ID.value(t.getCompanyId()),
					SERVICEREPORTTABLE.DEPT_ID.value(t.getDeptId()),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.value(t.getProductlineName()),
					SERVICEREPORTTABLE.PRODUCT_NAME.value(t.getProductName()),
					SERVICEREPORTTABLE.REQUEST_COUNT.value(t.getRequestCount()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.value(t.getRequestCountClient()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.value(t.getRequestCountReplyIntime()),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.value(t.getRequestCountCommit()),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.value(t.getRequestCountExpired()),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.value(t.getRequestCountReleased()),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.value(t.getRequestCommitSpan()),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.value(t.getRequestReleaseSpan()),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.value(t.getRequestCountBug()),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.value(t.getRequestCountNReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.value(t.getRequestCountCReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.value(t.getRequestCountNeedReview()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.value(t.getRequestCountReviewed()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.value(t.getRequestCountReviewedPass()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.value(t.getRequestCountClientFeedBack()),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.value(t.getRequestCountAddUp()),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.value(t.getRequestScoreTotal()),
					SERVICEREPORTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(ServiceReport serviceReport) {
		return getDslTemplate().updateObject(serviceReport, new UpdateGenerateCallback<ServiceReport>() {
			public Update generate(ServiceReport t) {
				Update update = update(SERVICEREPORTTABLE).set(
					SERVICEREPORTTABLE.SR_TITLE.value(t.getSrTitle()),
					SERVICEREPORTTABLE.SR_TYPE.value(t.getSrType()),
					SERVICEREPORTTABLE.SR_END_DATE.value(t.getSrEndDate()),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.value(t.getSrBeginDate()),
					SERVICEREPORTTABLE.SR_CREATE_BY.value(t.getSrCreateBy()),
					SERVICEREPORTTABLE.SR_CREATE_DATE.value(t.getSrCreateDate()),
					SERVICEREPORTTABLE.COMPANY_ID.value(t.getCompanyId()),
					SERVICEREPORTTABLE.DEPT_ID.value(t.getDeptId()),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.value(t.getProductlineName()),
					SERVICEREPORTTABLE.PRODUCT_NAME.value(t.getProductName()),
					SERVICEREPORTTABLE.REQUEST_COUNT.value(t.getRequestCount()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.value(t.getRequestCountClient()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.value(t.getRequestCountReplyIntime()),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.value(t.getRequestCountCommit()),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.value(t.getRequestCountExpired()),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.value(t.getRequestCountReleased()),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.value(t.getRequestCommitSpan()),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.value(t.getRequestReleaseSpan()),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.value(t.getRequestCountBug()),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.value(t.getRequestCountNReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.value(t.getRequestCountCReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.value(t.getRequestCountNeedReview()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.value(t.getRequestCountReviewed()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.value(t.getRequestCountReviewedPass()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.value(t.getRequestCountClientFeedBack()),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.value(t.getRequestCountAddUp()),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.value(t.getRequestScoreTotal()),
					SERVICEREPORTTABLE.DELETED.value(t.getDeleted())).where(
					SERVICEREPORTTABLE.SR_ID.eq(t.getSrId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(SERVICEREPORTTABLE).where(SERVICEREPORTTABLE.SR_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(SERVICEREPORTTABLE).where(SERVICEREPORTTABLE.SR_ID.in(t));
		}
		},pks);
	}

	public ServiceReport getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, ServiceReport.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(SERVICEREPORTTABLE).where(SERVICEREPORTTABLE.SR_ID.eq(t));
			}
		});
	}

	public List<ServiceReport> queryObjects(ServiceReport serviceReport) {
		if(serviceReport==null){
			serviceReport=new ServiceReport();
		}
		return getDslTemplate().queryObjects(serviceReport, new SelectGenerateCallback<ServiceReport>() {

			@SuppressWarnings("rawtypes")
			public Select generate(ServiceReport t) {
				return selectFrom(SERVICEREPORTTABLE).where(
				and(
					SERVICEREPORTTABLE.SR_TITLE.eq(t.getSrTitle()),
					SERVICEREPORTTABLE.SR_TYPE.eq(t.getSrType()),
					SERVICEREPORTTABLE.SR_END_DATE.eq(t.getSrEndDate()),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.eq(t.getSrBeginDate()),
					SERVICEREPORTTABLE.SR_CREATE_BY.eq(t.getSrCreateBy()),
					SERVICEREPORTTABLE.SR_CREATE_DATE.eq(t.getSrCreateDate()),
					SERVICEREPORTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					SERVICEREPORTTABLE.DEPT_ID.eq(t.getDeptId()),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.eq(t.getProductlineName()),
					SERVICEREPORTTABLE.PRODUCT_NAME.eq(t.getProductName()),
					SERVICEREPORTTABLE.REQUEST_COUNT.eq(t.getRequestCount()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.eq(t.getRequestCountClient()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.eq(t.getRequestCountReplyIntime()),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.eq(t.getRequestCountCommit()),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.eq(t.getRequestCountExpired()),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.eq(t.getRequestCountReleased()),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.eq(t.getRequestCommitSpan()),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.eq(t.getRequestReleaseSpan()),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.eq(t.getRequestCountBug()),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.eq(t.getRequestCountNReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.eq(t.getRequestCountCReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.eq(t.getRequestCountNeedReview()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.eq(t.getRequestCountReviewed()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.eq(t.getRequestCountReviewedPass()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.eq(t.getRequestCountClientFeedBack()),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.eq(t.getRequestCountAddUp()),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.eq(t.getRequestScoreTotal()),
					SERVICEREPORTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<ServiceReport> queryObjectsForPage(int start,int limit ,ServiceReport serviceReport) {
		if(serviceReport==null){
			serviceReport=new ServiceReport();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, serviceReport, false, new SelectGenerateCallback<ServiceReport>() {

			public Select generate(ServiceReport t) {
				return MysqlSelect.selectFrom(SERVICEREPORTTABLE).where(
				and(
					SERVICEREPORTTABLE.SR_TITLE.eq(t.getSrTitle()),
					SERVICEREPORTTABLE.SR_TYPE.eq(t.getSrType()),
					SERVICEREPORTTABLE.SR_END_DATE.eq(t.getSrEndDate()),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.eq(t.getSrBeginDate()),
					SERVICEREPORTTABLE.SR_CREATE_BY.eq(t.getSrCreateBy()),
					SERVICEREPORTTABLE.SR_CREATE_DATE.eq(t.getSrCreateDate()),
					SERVICEREPORTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					SERVICEREPORTTABLE.DEPT_ID.eq(t.getDeptId()),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.eq(t.getProductlineName()),
					SERVICEREPORTTABLE.PRODUCT_NAME.eq(t.getProductName()),
					SERVICEREPORTTABLE.REQUEST_COUNT.eq(t.getRequestCount()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.eq(t.getRequestCountClient()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.eq(t.getRequestCountReplyIntime()),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.eq(t.getRequestCountCommit()),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.eq(t.getRequestCountExpired()),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.eq(t.getRequestCountReleased()),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.eq(t.getRequestCommitSpan()),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.eq(t.getRequestReleaseSpan()),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.eq(t.getRequestCountBug()),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.eq(t.getRequestCountNReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.eq(t.getRequestCountCReq()),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.eq(t.getRequestCountNeedReview()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.eq(t.getRequestCountReviewed()),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.eq(t.getRequestCountReviewedPass()),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.eq(t.getRequestCountClientFeedBack()),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.eq(t.getRequestCountAddUp()),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.eq(t.getRequestScoreTotal()),
					SERVICEREPORTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<ServiceReport> serviceReports) {
		if (CollectionUtil.isEmpty(serviceReports)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, serviceReports, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(SERVICEREPORTTABLE).values(
					SERVICEREPORTTABLE.SR_TITLE.value(new JdbcNamedParameter("srTitle")),
					SERVICEREPORTTABLE.SR_TYPE.value(new JdbcNamedParameter("srType")),
					SERVICEREPORTTABLE.SR_END_DATE.value(new JdbcNamedParameter("srEndDate")),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.value(new JdbcNamedParameter("srBeginDate")),
					SERVICEREPORTTABLE.SR_CREATE_BY.value(new JdbcNamedParameter("srCreateBy")),
					SERVICEREPORTTABLE.SR_CREATE_DATE.value(new JdbcNamedParameter("srCreateDate")),
					SERVICEREPORTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					SERVICEREPORTTABLE.DEPT_ID.value(new JdbcNamedParameter("deptId")),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.value(new JdbcNamedParameter("productlineName")),
					SERVICEREPORTTABLE.PRODUCT_NAME.value(new JdbcNamedParameter("productName")),
					SERVICEREPORTTABLE.REQUEST_COUNT.value(new JdbcNamedParameter("requestCount")),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.value(new JdbcNamedParameter("requestCountClient")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.value(new JdbcNamedParameter("requestCountReplyIntime")),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.value(new JdbcNamedParameter("requestCountCommit")),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.value(new JdbcNamedParameter("requestCountExpired")),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.value(new JdbcNamedParameter("requestCountReleased")),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.value(new JdbcNamedParameter("requestCommitSpan")),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.value(new JdbcNamedParameter("requestReleaseSpan")),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.value(new JdbcNamedParameter("requestCountBug")),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.value(new JdbcNamedParameter("requestCountNReq")),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.value(new JdbcNamedParameter("requestCountCReq")),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.value(new JdbcNamedParameter("requestCountNeedReview")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.value(new JdbcNamedParameter("requestCountReviewed")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.value(new JdbcNamedParameter("requestCountReviewedPass")),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.value(new JdbcNamedParameter("requestCountClientFeedBack")),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.value(new JdbcNamedParameter("requestCountAddUp")),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.value(new JdbcNamedParameter("requestScoreTotal")),
					SERVICEREPORTTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<ServiceReport> serviceReports){
			return batchInsert(true ,serviceReports);
	}

	public int[] batchUpdate(List<ServiceReport> serviceReports) {
		if (CollectionUtil.isEmpty(serviceReports)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(serviceReports, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(SERVICEREPORTTABLE).set(
					SERVICEREPORTTABLE.SR_TITLE.value(new JdbcNamedParameter("srTitle")),
					SERVICEREPORTTABLE.SR_TYPE.value(new JdbcNamedParameter("srType")),
					SERVICEREPORTTABLE.SR_END_DATE.value(new JdbcNamedParameter("srEndDate")),
					SERVICEREPORTTABLE.SR_BEGIN_DATE.value(new JdbcNamedParameter("srBeginDate")),
					SERVICEREPORTTABLE.SR_CREATE_BY.value(new JdbcNamedParameter("srCreateBy")),
					SERVICEREPORTTABLE.SR_CREATE_DATE.value(new JdbcNamedParameter("srCreateDate")),
					SERVICEREPORTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					SERVICEREPORTTABLE.DEPT_ID.value(new JdbcNamedParameter("deptId")),
					SERVICEREPORTTABLE.PRODUCTLINE_NAME.value(new JdbcNamedParameter("productlineName")),
					SERVICEREPORTTABLE.PRODUCT_NAME.value(new JdbcNamedParameter("productName")),
					SERVICEREPORTTABLE.REQUEST_COUNT.value(new JdbcNamedParameter("requestCount")),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.value(new JdbcNamedParameter("requestCountClient")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.value(new JdbcNamedParameter("requestCountReplyIntime")),
					SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.value(new JdbcNamedParameter("requestCountCommit")),
					SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.value(new JdbcNamedParameter("requestCountExpired")),
					SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.value(new JdbcNamedParameter("requestCountReleased")),
					SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.value(new JdbcNamedParameter("requestCommitSpan")),
					SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.value(new JdbcNamedParameter("requestReleaseSpan")),
					SERVICEREPORTTABLE.REQUEST_COUNT_BUG.value(new JdbcNamedParameter("requestCountBug")),
					SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.value(new JdbcNamedParameter("requestCountNReq")),
					SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.value(new JdbcNamedParameter("requestCountCReq")),
					SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.value(new JdbcNamedParameter("requestCountNeedReview")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.value(new JdbcNamedParameter("requestCountReviewed")),
					SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.value(new JdbcNamedParameter("requestCountReviewedPass")),
					SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.value(new JdbcNamedParameter("requestCountClientFeedBack")),
					SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.value(new JdbcNamedParameter("requestCountAddUp")),
					SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.value(new JdbcNamedParameter("requestScoreTotal")),
					SERVICEREPORTTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				SERVICEREPORTTABLE.SR_ID.eq(new JdbcNamedParameter("srId")));
			}
		});
	}

	public int[] batchDelete(List<ServiceReport> serviceReports) {
		if (CollectionUtil.isEmpty(serviceReports)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(serviceReports, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(SERVICEREPORTTABLE).where(and(
				SERVICEREPORTTABLE.SR_ID.eq(new JdbcNamedParameter("srId")),
				SERVICEREPORTTABLE.SR_TITLE.eq(new JdbcNamedParameter("srTitle")),
				SERVICEREPORTTABLE.SR_TYPE.eq(new JdbcNamedParameter("srType")),
				SERVICEREPORTTABLE.SR_END_DATE.eq(new JdbcNamedParameter("srEndDate")),
				SERVICEREPORTTABLE.SR_BEGIN_DATE.eq(new JdbcNamedParameter("srBeginDate")),
				SERVICEREPORTTABLE.SR_CREATE_BY.eq(new JdbcNamedParameter("srCreateBy")),
				SERVICEREPORTTABLE.SR_CREATE_DATE.eq(new JdbcNamedParameter("srCreateDate")),
				SERVICEREPORTTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				SERVICEREPORTTABLE.DEPT_ID.eq(new JdbcNamedParameter("deptId")),
				SERVICEREPORTTABLE.PRODUCTLINE_NAME.eq(new JdbcNamedParameter("productlineName")),
				SERVICEREPORTTABLE.PRODUCT_NAME.eq(new JdbcNamedParameter("productName")),
				SERVICEREPORTTABLE.REQUEST_COUNT.eq(new JdbcNamedParameter("requestCount")),
				SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT.eq(new JdbcNamedParameter("requestCountClient")),
				SERVICEREPORTTABLE.REQUEST_COUNT_REPLY_INTIME.eq(new JdbcNamedParameter("requestCountReplyIntime")),
				SERVICEREPORTTABLE.REQUEST_COUNT_COMMIT.eq(new JdbcNamedParameter("requestCountCommit")),
				SERVICEREPORTTABLE.REQUEST_COUNT_EXPIRED.eq(new JdbcNamedParameter("requestCountExpired")),
				SERVICEREPORTTABLE.REQUEST_COUNT_RELEASED.eq(new JdbcNamedParameter("requestCountReleased")),
				SERVICEREPORTTABLE.REQUEST_COMMIT_SPAN.eq(new JdbcNamedParameter("requestCommitSpan")),
				SERVICEREPORTTABLE.REQUEST_RELEASE_SPAN.eq(new JdbcNamedParameter("requestReleaseSpan")),
				SERVICEREPORTTABLE.REQUEST_COUNT_BUG.eq(new JdbcNamedParameter("requestCountBug")),
				SERVICEREPORTTABLE.REQUEST_COUNT_N_REQ.eq(new JdbcNamedParameter("requestCountNReq")),
				SERVICEREPORTTABLE.REQUEST_COUNT_C_REQ.eq(new JdbcNamedParameter("requestCountCReq")),
				SERVICEREPORTTABLE.REQUEST_COUNT_NEED_REVIEW.eq(new JdbcNamedParameter("requestCountNeedReview")),
				SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED.eq(new JdbcNamedParameter("requestCountReviewed")),
				SERVICEREPORTTABLE.REQUEST_COUNT_REVIEWED_PASS.eq(new JdbcNamedParameter("requestCountReviewedPass")),
				SERVICEREPORTTABLE.REQUEST_COUNT_CLIENT_FEED_BACK.eq(new JdbcNamedParameter("requestCountClientFeedBack")),
				SERVICEREPORTTABLE.REQUEST_COUNT_ADD_UP.eq(new JdbcNamedParameter("requestCountAddUp")),
				SERVICEREPORTTABLE.REQUEST_SCORE_TOTAL.eq(new JdbcNamedParameter("requestScoreTotal")),
				SERVICEREPORTTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
