#import("/org/tinygroup/table/components/togglebox.component")
#import("/org/tinygroup/compose/components/compose_typography.component")
#import("/org/tinygroup/button/components/button_smart.component")
#!set(activeMenuId=currentPageId)

#@toggleBox({"class":"open"})##展开为class:OPEN 要附加其它的属性请用MAP带入
	#@toggleLeft({"class":"aclass"})
		#@settoggleLeftTitle()
			#if(documentLibId)
				#for(lib : libList)
					#if(lib?.docLibId == documentLibId)
						${lib?.docLibName}
					#end
				#end
			#else产品文档库 #end 
		#end
		#@settoggleLeftBody("treeLeftbox")
			 #@zTreeList(call("link","/system/module/data"))
                    #setzTreeValMap({"id":"moduleId","name":"moduleName","pid":"moduleParent"}) ##key值为固定
                    #zTreeSetLinkUrl(TINY_CONTEXT_PATH+"/document" )
                    #zTreeSetAddUrl(TINY_CONTEXT_PATH+"/system/module/story/add?moduleType=story")
                    #zTreeSetEditUrl(TINY_CONTEXT_PATH+"/system/module/story/edit")
                    #zTreeSetDelUrl(TINY_CONTEXT_PATH+"/system/module/story/deleteTree")
               #end
		#end
	#end
	
	#@toggleRight()
		#@tinyTable(docTableId) ##ID为空则系统自动生成 带入参数则取该参数为ID
			#@div(divBaseClass="tinyheaderTools form-inline")
				#setTinyTablePageSize([10,20,50,100,200,35]) ##每页数据条数设置
				##批量删除
				#foreach(m:menuManager.getScopeMenus("docdelete-op"))
				#if(m.id == "batch-delete")
            		#@mulOperation("muldelete" TINY_CONTEXT_PATH+"/document/doc/batchDelete")
            			<a class="btn radius btn-danger btn-sm "><i class="icon-trash"></i> 批量删除</a>
            		#end
            	#end
            	#end		
            					
			#end
			#@tinyTableContent(TINY_CONTEXT_PATH+"/document/doc/list") ##取数据地址 总数据
				#@thead()
					#@tr()  ##class 为sorting 表票可排序 为sorting_desc(正序为为sorting_asc) 为当前倒序
						#@tinyTh({"width":"6"})<input type="checkbox" name="allck" value="">#end
						#@tinyTh({"class":"sorting","rel":"doc_id"})ID#end
						#@tinyTh({"class":"sorting","rel":"doc_title"})文档标题#end
						#@tinyTh({"class":"sorting","rel":"doc_type"})文档类型#end
						#@tinyTh({"class":"sorting","rel":"doc_added_by"})由谁添加#end
						#@tinyTh({"class":"sorting","rel":"doc_added_date"})添加时间#end
						#@tinyTh({"class":"","rel":""})操作#end
					#end
				#end
			#end
			##以下部分为对删除和修改的影响 因为存在不同的信息故放在外面自行更改 #dialog 配合修改使用
			<script type="text/javascript">
				$(function(){
					$('#${tableId}').on('click','.delBtn',function(e){
						user_del(this,'1');
					});
				})
			</script>
			
		#end
	#end
#end

<script type="text/javascript">
		<!--
		var setting = {
			view: {
				addHoverDom: addHoverDom,
				removeHoverDom: removeHoverDom,
				selectedMulti: false
			},
			edit: {
				enable: true,
				editNameSelectAll: true,

			},
			data: {
				simpleData: {
					enable: true
				}
			},
			callback: {
				beforeDrag: beforeDrag,
				beforeEditName: beforeEditName,
				beforeRemove: beforeRemove,
				beforeRename: beforeRename,
				onRemove: onRemove,
				onRename: onRename
			}
		};
		var treeNodes =[
			{ id:1, pId:0, name:"产品1", open:true},
			{ id:11, pId:1, name:"${libname} 1-1"},
			{ id:12, pId:1, name:"分类 1-2"},
			{ id:13, pId:1, name:"分类 1-3"},
			{ id:2, pId:0, name:"产品2", open:true},
			{ id:21, pId:2, name:"分类 2-1"},
			{ id:22, pId:2, name:"分类 2-2"},
			{ id:23, pId:2, name:"分类 2-3"},
			{ id:3, pId:0, name:"禁止拖拽产品3", open:true, drag:false},
			{ id:31, pId:3, name:"城市 3-1", drag:false},
			{ id:32, pId:3, name:"城市 3-2", drag:false},
			{ id:33, pId:3, name:"地区 3-3", drag:false}
		];

		var log, className = "dark";
		function beforeDrag(treeId, treeNodes) {
			return false;
		}
		function beforeEditName(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeEditName ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.selectNode(treeNode);
			return confirm("进入节点 -- " + treeNode.name + " 的编辑状态吗？");
		}
		function beforeRemove(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.selectNode(treeNode);
			return confirm("确认删除 节点 -- " + treeNode.name + " 吗？");
		}
		function onRemove(e, treeId, treeNode) {
			showLog("[ "+getTime()+" onRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
		}
		function beforeRename(treeId, treeNode, newName, isCancel) {
			className = (className === "dark" ? "":"dark");
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" beforeRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
			if (newName.length == 0) {
				alert("节点名称不能为空.");
				var zTree = $.fn.zTree.getZTreeObj("treeDrag");
				setTimeout(function(){zTree.editName(treeNode)}, 10);
				return false;
			}
			return true;
		}
		function onRename(e, treeId, treeNode, isCancel) {
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" onRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
		}
		function showRemoveBtn(treeId, treeNode) {
			return !treeNode.isFirstNode;
		}
		function showRenameBtn(treeId, treeNode) {
			return !treeNode.isLastNode;
		}
		function showLog(str) {
			if (!log) log = $("#log");
			log.append("<li class='"+className+"'>"+str+"</li>");
			if(log.children("li").length > 8) {
				log.get(0).removeChild(log.children("li")[0]);
			}
		}
		function getTime() {
			var now= new Date(),
			h=now.getHours(),
			m=now.getMinutes(),
			s=now.getSeconds(),
			ms=now.getMilliseconds();
			return (h+":"+m+":"+s+ " " +ms);
		}

		var newCount = 1;
		function addHoverDom(treeId, treeNode) {
			var sObj = $("#" + treeNode.tId + "_span");
			if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
			var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
				+ "' title='add node' onfocus='this.blur();'></span>";
			sObj.after(addStr);
			var btn = $("#addBtn_"+treeNode.tId);
			if (btn) btn.bind("click", function(){
				var zTree = $.fn.zTree.getZTreeObj("treeDrag");
				zTree.addNodes(treeNode, {id:(100 + newCount), pId:treeNode.id, name:"new node" + (newCount++)});
				return false;
			});
		};
		function removeHoverDom(treeId, treeNode) {
			$("#addBtn_"+treeNode.tId).unbind().remove();
		};
		function selectAll() {
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.setting.edit.editNameSelectAll =  $("#selectAll").attr("checked");
		}

		$(document).ready(function(){
			$.fn.zTree.init($("#treeDrag"), setting);
			$("#selectAll").bind("click", selectAll);
		});
		//-->

		function dropPrev(treeId, nodes, targetNode) {
			var pNode = targetNode.getParentNode();
			if (pNode && pNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					var curPNode = curDragNodes[i].getParentNode();
					if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}
		function dropInner(treeId, nodes, targetNode) {
			if (targetNode && targetNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					if (!targetNode && curDragNodes[i].dropRoot === false) {
						return false;
					} else if (curDragNodes[i].parentTId && curDragNodes[i].getParentNode() !== targetNode && curDragNodes[i].getParentNode().childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}
		function dropNext(treeId, nodes, targetNode) {
			var pNode = targetNode.getParentNode();
			if (pNode && pNode.dropInner === false) {
				return false;
			} else {
				for (var i=0,l=curDragNodes.length; i<l; i++) {
					var curPNode = curDragNodes[i].getParentNode();
					if (curPNode && curPNode !== targetNode.getParentNode() && curPNode.childOuter === false) {
						return false;
					}
				}
			}
			return true;
		}

		var log, className = "dark", curDragNodes, autoExpandNode;
		function beforeDrag(treeId, treeNodes) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeDrag ]&nbsp;&nbsp;&nbsp;&nbsp; drag: " + treeNodes.length + " nodes." );
			for (var i=0,l=treeNodes.length; i<l; i++) {
				if (treeNodes[i].drag === false) {
					curDragNodes = null;
					return false;
				} else if (treeNodes[i].parentTId && treeNodes[i].getParentNode().childDrag === false) {
					curDragNodes = null;
					return false;
				}
			}
			curDragNodes = treeNodes;
			return true;
		}
		function beforeDragOpen(treeId, treeNode) {
			autoExpandNode = treeNode;
			return true;
		}
		function beforeDrop(treeId, treeNodes, targetNode, moveType, isCopy) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeDrop ]&nbsp;&nbsp;&nbsp;&nbsp; moveType:" + moveType);
			showLog("target: " + (targetNode ? targetNode.name : "root") + "  -- is "+ (isCopy==null? "cancel" : isCopy ? "copy" : "move"));
			return true;
		}
		function onDrag(event, treeId, treeNodes) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" onDrag ]&nbsp;&nbsp;&nbsp;&nbsp; drag: " + treeNodes.length + " nodes." );
		}
		function onDrop(event, treeId, treeNodes, targetNode, moveType, isCopy) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" onDrop ]&nbsp;&nbsp;&nbsp;&nbsp; moveType:" + moveType);
			showLog("target: " + (targetNode ? targetNode.name : "root") + "  -- is "+ (isCopy==null? "cancel" : isCopy ? "copy" : "move"))
		}
		function onExpand(event, treeId, treeNode) {
			if (treeNode === autoExpandNode) {
				className = (className === "dark" ? "":"dark");
				showLog("[ "+getTime()+" onExpand ]&nbsp;&nbsp;&nbsp;&nbsp;" + treeNode.name);
			}
		}

		function showLog(str) {
			if (!log) log = $("#log");
			log.append("<li class='"+className+"'>"+str+"</li>");
			if(log.children("li").length > 8) {
				log.get(0).removeChild(log.children("li")[0]);
			}
		}
		function getTime() {
			var now= new Date(),
			h=now.getHours(),
			m=now.getMinutes(),
			s=now.getSeconds(),
			ms=now.getMilliseconds();
			return (h+":"+m+":"+s+ " " +ms);
		}

		function setTrigger() {
			var zTree = $.fn.zTree.getZTreeObj("treeDrag");
			zTree.setting.edit.drag.autoExpandTrigger = $("#callbackTrigger").attr("checked");
		}

		$(document).ready(function(){
			$.fn.zTree.init($("#treeDrag"), setting, treeNodes);
			$("#callbackTrigger").bind("change", {}, setTrigger);
		});
		//-->
	</script>
