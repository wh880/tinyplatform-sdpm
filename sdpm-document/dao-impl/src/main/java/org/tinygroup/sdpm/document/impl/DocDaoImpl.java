/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.document.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.document.constant.DocTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.document.pojo.Doc;
import org.tinygroup.sdpm.document.inter.DocDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class DocDaoImpl extends TinyDslDaoSupport implements DocDao {

	public Doc insertObject(Doc doc) {
		return getDslTemplate().insertObject(doc, new InsertGenerateCallback<Doc>() {
			public Insert generate(Doc t) {
				Insert insert = insertInto(DOCTABLE).values(
					DOCTABLE.DOC_ID.value(t.getDocId()),
					DOCTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCTABLE.PRODUCT_ID.value(t.getProductId()),
					DOCTABLE.PROJECT_ID.value(t.getProjectId()),
					DOCTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCTABLE.MODULE_ID.value(t.getModuleId()),
					DOCTABLE.DOC_TITLE.value(t.getDocTitle()),
					DOCTABLE.DOC_ABSTRACT.value(t.getDocAbstract()),
					DOCTABLE.DOC_KEYWORDS.value(t.getDocKeywords()),
					DOCTABLE.DOC_TYPE.value(t.getDocType()),
					DOCTABLE.DOC_CONTENT.value(t.getDocContent()),
					DOCTABLE.DOC_URL.value(t.getDocUrl()),
					DOCTABLE.DOC_VIEWS.value(t.getDocViews()),
					DOCTABLE.DOC_ADDED_BY.value(t.getDocAddedBy()),
					DOCTABLE.DOC_ADDED_DATE.value(t.getDocAddedDate()),
					DOCTABLE.DOC_EDITED_BY.value(t.getDocEditedBy()),
					DOCTABLE.DOC_EDITED_DATE.value(t.getDocEditedDate()),
					DOCTABLE.DOC_SCORE.value(t.getDocScore()),
					DOCTABLE.DOC_SHARE.value(t.getDocShare()),
					DOCTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Doc insertObject(boolean autoGeneratedKeys ,Doc doc) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,doc, new InsertGenerateCallback<Doc>() {

			public Insert generate(Doc t) {
				Insert insert = insertInto(DOCTABLE).values(
					DOCTABLE.DOC_ID.value(t.getDocId()),
					DOCTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCTABLE.PRODUCT_ID.value(t.getProductId()),
					DOCTABLE.PROJECT_ID.value(t.getProjectId()),
					DOCTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCTABLE.MODULE_ID.value(t.getModuleId()),
					DOCTABLE.DOC_TITLE.value(t.getDocTitle()),
					DOCTABLE.DOC_ABSTRACT.value(t.getDocAbstract()),
					DOCTABLE.DOC_KEYWORDS.value(t.getDocKeywords()),
					DOCTABLE.DOC_TYPE.value(t.getDocType()),
					DOCTABLE.DOC_CONTENT.value(t.getDocContent()),
					DOCTABLE.DOC_URL.value(t.getDocUrl()),
					DOCTABLE.DOC_VIEWS.value(t.getDocViews()),
					DOCTABLE.DOC_ADDED_BY.value(t.getDocAddedBy()),
					DOCTABLE.DOC_ADDED_DATE.value(t.getDocAddedDate()),
					DOCTABLE.DOC_EDITED_BY.value(t.getDocEditedBy()),
					DOCTABLE.DOC_EDITED_DATE.value(t.getDocEditedDate()),
					DOCTABLE.DOC_SCORE.value(t.getDocScore()),
					DOCTABLE.DOC_SHARE.value(t.getDocShare()),
					DOCTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Doc doc) {
		return getDslTemplate().updateObject(doc, new UpdateGenerateCallback<Doc>() {
			public Update generate(Doc t) {
				Update update = update(DOCTABLE).set(
					DOCTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCTABLE.PRODUCT_ID.value(t.getProductId()),
					DOCTABLE.PROJECT_ID.value(t.getProjectId()),
					DOCTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCTABLE.MODULE_ID.value(t.getModuleId()),
					DOCTABLE.DOC_TITLE.value(t.getDocTitle()),
					DOCTABLE.DOC_ABSTRACT.value(t.getDocAbstract()),
					DOCTABLE.DOC_KEYWORDS.value(t.getDocKeywords()),
					DOCTABLE.DOC_TYPE.value(t.getDocType()),
					DOCTABLE.DOC_CONTENT.value(t.getDocContent()),
					DOCTABLE.DOC_URL.value(t.getDocUrl()),
					DOCTABLE.DOC_VIEWS.value(t.getDocViews()),
					DOCTABLE.DOC_ADDED_BY.value(t.getDocAddedBy()),
					DOCTABLE.DOC_ADDED_DATE.value(t.getDocAddedDate()),
					DOCTABLE.DOC_EDITED_BY.value(t.getDocEditedBy()),
					DOCTABLE.DOC_EDITED_DATE.value(t.getDocEditedDate()),
					DOCTABLE.DOC_SCORE.value(t.getDocScore()),
					DOCTABLE.DOC_SHARE.value(t.getDocShare()),
					DOCTABLE.DELETED.value(t.getDeleted())).where(
					DOCTABLE.DOC_ID.eq(t.getDocId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(DOCTABLE).where(DOCTABLE.DOC_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(DOCTABLE).where(DOCTABLE.DOC_ID.in(t));
		}
		},pks);
	}

	public Doc getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Doc.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(DOCTABLE).where(DOCTABLE.DOC_ID.eq(t));
			}
		});
	}

	public List<Doc> queryObjects(Doc doc) {
		if(doc==null){
			doc=new Doc();
		}
		return getDslTemplate().queryObjects(doc, new SelectGenerateCallback<Doc>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Doc t) {
				return selectFrom(DOCTABLE).where(
				and(
					DOCTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DOCTABLE.PRODUCT_ID.eq(t.getProductId()),
					DOCTABLE.PROJECT_ID.eq(t.getProjectId()),
					DOCTABLE.DOCLIB_NAME.eq(t.getDoclibName()),
					DOCTABLE.MODULE_ID.eq(t.getModuleId()),
					DOCTABLE.DOC_TITLE.eq(t.getDocTitle()),
					DOCTABLE.DOC_ABSTRACT.eq(t.getDocAbstract()),
					DOCTABLE.DOC_KEYWORDS.eq(t.getDocKeywords()),
					DOCTABLE.DOC_TYPE.eq(t.getDocType()),
					DOCTABLE.DOC_CONTENT.eq(t.getDocContent()),
					DOCTABLE.DOC_URL.eq(t.getDocUrl()),
					DOCTABLE.DOC_VIEWS.eq(t.getDocViews()),
					DOCTABLE.DOC_ADDED_BY.eq(t.getDocAddedBy()),
					DOCTABLE.DOC_ADDED_DATE.eq(t.getDocAddedDate()),
					DOCTABLE.DOC_EDITED_BY.eq(t.getDocEditedBy()),
					DOCTABLE.DOC_EDITED_DATE.eq(t.getDocEditedDate()),
					DOCTABLE.DOC_SCORE.eq(t.getDocScore()),
					DOCTABLE.DOC_SHARE.eq(t.getDocShare()),
					DOCTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Doc> queryObjectsForPage(int start,int limit ,Doc doc) {
		if(doc==null){
			doc=new Doc();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, doc, false, new SelectGenerateCallback<Doc>() {

			public Select generate(Doc t) {
				return MysqlSelect.selectFrom(DOCTABLE).where(
				and(
					DOCTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DOCTABLE.PRODUCT_ID.eq(t.getProductId()),
					DOCTABLE.PROJECT_ID.eq(t.getProjectId()),
					DOCTABLE.DOCLIB_NAME.eq(t.getDoclibName()),
					DOCTABLE.MODULE_ID.eq(t.getModuleId()),
					DOCTABLE.DOC_TITLE.eq(t.getDocTitle()),
					DOCTABLE.DOC_ABSTRACT.eq(t.getDocAbstract()),
					DOCTABLE.DOC_KEYWORDS.eq(t.getDocKeywords()),
					DOCTABLE.DOC_TYPE.eq(t.getDocType()),
					DOCTABLE.DOC_CONTENT.eq(t.getDocContent()),
					DOCTABLE.DOC_URL.eq(t.getDocUrl()),
					DOCTABLE.DOC_VIEWS.eq(t.getDocViews()),
					DOCTABLE.DOC_ADDED_BY.eq(t.getDocAddedBy()),
					DOCTABLE.DOC_ADDED_DATE.eq(t.getDocAddedDate()),
					DOCTABLE.DOC_EDITED_BY.eq(t.getDocEditedBy()),
					DOCTABLE.DOC_EDITED_DATE.eq(t.getDocEditedDate()),
					DOCTABLE.DOC_SCORE.eq(t.getDocScore()),
					DOCTABLE.DOC_SHARE.eq(t.getDocShare()),
					DOCTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Doc> docs) {
		if (CollectionUtil.isEmpty(docs)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, docs, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(DOCTABLE).values(
					DOCTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DOCTABLE.PRODUCT_ID.value(new JdbcNamedParameter("productId")),
					DOCTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					DOCTABLE.DOCLIB_NAME.value(new JdbcNamedParameter("doclibName")),
					DOCTABLE.MODULE_ID.value(new JdbcNamedParameter("moduleId")),
					DOCTABLE.DOC_TITLE.value(new JdbcNamedParameter("docTitle")),
					DOCTABLE.DOC_ABSTRACT.value(new JdbcNamedParameter("docAbstract")),
					DOCTABLE.DOC_KEYWORDS.value(new JdbcNamedParameter("docKeywords")),
					DOCTABLE.DOC_TYPE.value(new JdbcNamedParameter("docType")),
					DOCTABLE.DOC_CONTENT.value(new JdbcNamedParameter("docContent")),
					DOCTABLE.DOC_URL.value(new JdbcNamedParameter("docUrl")),
					DOCTABLE.DOC_VIEWS.value(new JdbcNamedParameter("docViews")),
					DOCTABLE.DOC_ADDED_BY.value(new JdbcNamedParameter("docAddedBy")),
					DOCTABLE.DOC_ADDED_DATE.value(new JdbcNamedParameter("docAddedDate")),
					DOCTABLE.DOC_EDITED_BY.value(new JdbcNamedParameter("docEditedBy")),
					DOCTABLE.DOC_EDITED_DATE.value(new JdbcNamedParameter("docEditedDate")),
					DOCTABLE.DOC_SCORE.value(new JdbcNamedParameter("docScore")),
					DOCTABLE.DOC_SHARE.value(new JdbcNamedParameter("docShare")),
					DOCTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Doc> docs){
			return batchInsert(true ,docs);
	}

	public int[] batchUpdate(List<Doc> docs) {
		if (CollectionUtil.isEmpty(docs)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(docs, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(DOCTABLE).set(
					DOCTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DOCTABLE.PRODUCT_ID.value(new JdbcNamedParameter("productId")),
					DOCTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					DOCTABLE.DOCLIB_NAME.value(new JdbcNamedParameter("doclibName")),
					DOCTABLE.MODULE_ID.value(new JdbcNamedParameter("moduleId")),
					DOCTABLE.DOC_TITLE.value(new JdbcNamedParameter("docTitle")),
					DOCTABLE.DOC_ABSTRACT.value(new JdbcNamedParameter("docAbstract")),
					DOCTABLE.DOC_KEYWORDS.value(new JdbcNamedParameter("docKeywords")),
					DOCTABLE.DOC_TYPE.value(new JdbcNamedParameter("docType")),
					DOCTABLE.DOC_CONTENT.value(new JdbcNamedParameter("docContent")),
					DOCTABLE.DOC_URL.value(new JdbcNamedParameter("docUrl")),
					DOCTABLE.DOC_VIEWS.value(new JdbcNamedParameter("docViews")),
					DOCTABLE.DOC_ADDED_BY.value(new JdbcNamedParameter("docAddedBy")),
					DOCTABLE.DOC_ADDED_DATE.value(new JdbcNamedParameter("docAddedDate")),
					DOCTABLE.DOC_EDITED_BY.value(new JdbcNamedParameter("docEditedBy")),
					DOCTABLE.DOC_EDITED_DATE.value(new JdbcNamedParameter("docEditedDate")),
					DOCTABLE.DOC_SCORE.value(new JdbcNamedParameter("docScore")),
					DOCTABLE.DOC_SHARE.value(new JdbcNamedParameter("docShare")),
					DOCTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				DOCTABLE.DOC_ID.eq(new JdbcNamedParameter("docId")));
			}
		});
	}

	public int[] batchDelete(List<Doc> docs) {
		if (CollectionUtil.isEmpty(docs)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(docs, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(DOCTABLE).where(and(
				DOCTABLE.DOC_ID.eq(new JdbcNamedParameter("docId")),
				DOCTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				DOCTABLE.PRODUCT_ID.eq(new JdbcNamedParameter("productId")),
				DOCTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				DOCTABLE.DOCLIB_NAME.eq(new JdbcNamedParameter("doclibName")),
				DOCTABLE.MODULE_ID.eq(new JdbcNamedParameter("moduleId")),
				DOCTABLE.DOC_TITLE.eq(new JdbcNamedParameter("docTitle")),
				DOCTABLE.DOC_ABSTRACT.eq(new JdbcNamedParameter("docAbstract")),
				DOCTABLE.DOC_KEYWORDS.eq(new JdbcNamedParameter("docKeywords")),
				DOCTABLE.DOC_TYPE.eq(new JdbcNamedParameter("docType")),
				DOCTABLE.DOC_CONTENT.eq(new JdbcNamedParameter("docContent")),
				DOCTABLE.DOC_URL.eq(new JdbcNamedParameter("docUrl")),
				DOCTABLE.DOC_VIEWS.eq(new JdbcNamedParameter("docViews")),
				DOCTABLE.DOC_ADDED_BY.eq(new JdbcNamedParameter("docAddedBy")),
				DOCTABLE.DOC_ADDED_DATE.eq(new JdbcNamedParameter("docAddedDate")),
				DOCTABLE.DOC_EDITED_BY.eq(new JdbcNamedParameter("docEditedBy")),
				DOCTABLE.DOC_EDITED_DATE.eq(new JdbcNamedParameter("docEditedDate")),
				DOCTABLE.DOC_SCORE.eq(new JdbcNamedParameter("docScore")),
				DOCTABLE.DOC_SHARE.eq(new JdbcNamedParameter("docShare")),
				DOCTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
