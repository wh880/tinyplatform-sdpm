/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.document.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.document.constant.DocLibTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.document.pojo.DocLib;
import org.tinygroup.sdpm.document.inter.DocLibDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class DocLibDaoImpl extends TinyDslDaoSupport implements DocLibDao {

	public DocLib insertObject(DocLib docLib) {
		return getDslTemplate().insertObject(docLib, new InsertGenerateCallback<DocLib>() {
			public Insert generate(DocLib t) {
				Insert insert = insertInto(DOCLIBTABLE).values(
					DOCLIBTABLE.DOCLIB_ID.value(t.getDoclibId()),
					DOCLIBTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCLIBTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCLIBTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public DocLib insertObject(boolean autoGeneratedKeys ,DocLib docLib) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,docLib, new InsertGenerateCallback<DocLib>() {

			public Insert generate(DocLib t) {
				Insert insert = insertInto(DOCLIBTABLE).values(
					DOCLIBTABLE.DOCLIB_ID.value(t.getDoclibId()),
					DOCLIBTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCLIBTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCLIBTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(DocLib docLib) {
		return getDslTemplate().updateObject(docLib, new UpdateGenerateCallback<DocLib>() {
			public Update generate(DocLib t) {
				Update update = update(DOCLIBTABLE).set(
					DOCLIBTABLE.COMPANY_ID.value(t.getCompanyId()),
					DOCLIBTABLE.DOCLIB_NAME.value(t.getDoclibName()),
					DOCLIBTABLE.DELETED.value(t.getDeleted())).where(
					DOCLIBTABLE.DOCLIB_ID.eq(t.getDoclibId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(DOCLIBTABLE).where(DOCLIBTABLE.DOCLIB_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(DOCLIBTABLE).where(DOCLIBTABLE.DOCLIB_ID.in(t));
		}
		},pks);
	}

	public DocLib getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, DocLib.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(DOCLIBTABLE).where(DOCLIBTABLE.DOCLIB_ID.eq(t));
			}
		});
	}

	public List<DocLib> queryObjects(DocLib docLib) {
		if(docLib==null){
			docLib=new DocLib();
		}
		return getDslTemplate().queryObjects(docLib, new SelectGenerateCallback<DocLib>() {

			@SuppressWarnings("rawtypes")
			public Select generate(DocLib t) {
				return selectFrom(DOCLIBTABLE).where(
				and(
					DOCLIBTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DOCLIBTABLE.DOCLIB_NAME.eq(t.getDoclibName()),
					DOCLIBTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<DocLib> queryObjectsForPage(int start,int limit ,DocLib docLib) {
		if(docLib==null){
			docLib=new DocLib();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, docLib, false, new SelectGenerateCallback<DocLib>() {

			public Select generate(DocLib t) {
				return MysqlSelect.selectFrom(DOCLIBTABLE).where(
				and(
					DOCLIBTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DOCLIBTABLE.DOCLIB_NAME.eq(t.getDoclibName()),
					DOCLIBTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<DocLib> docLibs) {
		if (CollectionUtil.isEmpty(docLibs)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, docLibs, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(DOCLIBTABLE).values(
					DOCLIBTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DOCLIBTABLE.DOCLIB_NAME.value(new JdbcNamedParameter("doclibName")),
					DOCLIBTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<DocLib> docLibs){
			return batchInsert(true ,docLibs);
	}

	public int[] batchUpdate(List<DocLib> docLibs) {
		if (CollectionUtil.isEmpty(docLibs)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(docLibs, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(DOCLIBTABLE).set(
					DOCLIBTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DOCLIBTABLE.DOCLIB_NAME.value(new JdbcNamedParameter("doclibName")),
					DOCLIBTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				DOCLIBTABLE.DOCLIB_ID.eq(new JdbcNamedParameter("doclibId")));
			}
		});
	}

	public int[] batchDelete(List<DocLib> docLibs) {
		if (CollectionUtil.isEmpty(docLibs)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(docLibs, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(DOCLIBTABLE).where(and(
				DOCLIBTABLE.DOCLIB_ID.eq(new JdbcNamedParameter("doclibId")),
				DOCLIBTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				DOCLIBTABLE.DOCLIB_NAME.eq(new JdbcNamedParameter("doclibName")),
				DOCLIBTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
