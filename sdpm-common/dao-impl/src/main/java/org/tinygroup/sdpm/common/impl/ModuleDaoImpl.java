/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.ModuleTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Module;
import org.tinygroup.sdpm.common.inter.ModuleDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class ModuleDaoImpl extends TinyDslDaoSupport implements ModuleDao {

	public Module insertObject(Module module) {
		return getDslTemplate().insertObject(module, new InsertGenerateCallback<Module>() {
			public Insert generate(Module t) {
				Insert insert = insertInto(MODULETABLE).values(
					MODULETABLE.MODULE_ID.value(t.getModuleId()),
					MODULETABLE.COMPANY_ID.value(t.getCompanyId()),
					MODULETABLE.MODULE_ROOT.value(t.getModuleRoot()),
					MODULETABLE.MODULE_NAME.value(t.getModuleName()),
					MODULETABLE.MODULE_PARENT.value(t.getModuleParent()),
					MODULETABLE.MODULE_PATH.value(t.getModulePath()),
					MODULETABLE.MODULE_GRADE.value(t.getModuleGrade()),
					MODULETABLE.MODULE_ORDER.value(t.getModuleOrder()),
					MODULETABLE.MODULE_TYPE.value(t.getModuleType()),
					MODULETABLE.MODULE_OWNER.value(t.getModuleOwner()),
					MODULETABLE.MODULE_SPEC.value(t.getModuleSpec()));
				return insert;
			}
		});
	}

	public Module insertObject(boolean autoGeneratedKeys ,Module module) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,module, new InsertGenerateCallback<Module>() {

			public Insert generate(Module t) {
				Insert insert = insertInto(MODULETABLE).values(
					MODULETABLE.MODULE_ID.value(t.getModuleId()),
					MODULETABLE.COMPANY_ID.value(t.getCompanyId()),
					MODULETABLE.MODULE_ROOT.value(t.getModuleRoot()),
					MODULETABLE.MODULE_NAME.value(t.getModuleName()),
					MODULETABLE.MODULE_PARENT.value(t.getModuleParent()),
					MODULETABLE.MODULE_PATH.value(t.getModulePath()),
					MODULETABLE.MODULE_GRADE.value(t.getModuleGrade()),
					MODULETABLE.MODULE_ORDER.value(t.getModuleOrder()),
					MODULETABLE.MODULE_TYPE.value(t.getModuleType()),
					MODULETABLE.MODULE_OWNER.value(t.getModuleOwner()),
					MODULETABLE.MODULE_SPEC.value(t.getModuleSpec()));
				return insert;
			}
		});
	}

	public int updateObject(Module module) {
		return getDslTemplate().updateObject(module, new UpdateGenerateCallback<Module>() {
			public Update generate(Module t) {
				Update update = update(MODULETABLE).set(
					MODULETABLE.COMPANY_ID.value(t.getCompanyId()),
					MODULETABLE.MODULE_ROOT.value(t.getModuleRoot()),
					MODULETABLE.MODULE_NAME.value(t.getModuleName()),
					MODULETABLE.MODULE_PARENT.value(t.getModuleParent()),
					MODULETABLE.MODULE_PATH.value(t.getModulePath()),
					MODULETABLE.MODULE_GRADE.value(t.getModuleGrade()),
					MODULETABLE.MODULE_ORDER.value(t.getModuleOrder()),
					MODULETABLE.MODULE_TYPE.value(t.getModuleType()),
					MODULETABLE.MODULE_OWNER.value(t.getModuleOwner()),
					MODULETABLE.MODULE_SPEC.value(t.getModuleSpec())).where(
					MODULETABLE.MODULE_ID.eq(t.getModuleId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(MODULETABLE).where(MODULETABLE.MODULE_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(MODULETABLE).where(MODULETABLE.MODULE_ID.in(t));
		}
		},pks);
	}

	public Module getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Module.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(MODULETABLE).where(MODULETABLE.MODULE_ID.eq(t));
			}
		});
	}

	public List<Module> queryObjects(Module module) {
		if(module==null){
			module=new Module();
		}
		return getDslTemplate().queryObjects(module, new SelectGenerateCallback<Module>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Module t) {
				return selectFrom(MODULETABLE).where(
				and(
					MODULETABLE.COMPANY_ID.eq(t.getCompanyId()),
					MODULETABLE.MODULE_ROOT.eq(t.getModuleRoot()),
					MODULETABLE.MODULE_NAME.eq(t.getModuleName()),
					MODULETABLE.MODULE_PARENT.eq(t.getModuleParent()),
					MODULETABLE.MODULE_PATH.eq(t.getModulePath()),
					MODULETABLE.MODULE_GRADE.eq(t.getModuleGrade()),
					MODULETABLE.MODULE_ORDER.eq(t.getModuleOrder()),
					MODULETABLE.MODULE_TYPE.eq(t.getModuleType()),
					MODULETABLE.MODULE_OWNER.eq(t.getModuleOwner()),
					MODULETABLE.MODULE_SPEC.eq(t.getModuleSpec())));
			}
		});
	}

	public Pager<Module> queryObjectsForPage(int start,int limit ,Module module) {
		if(module==null){
			module=new Module();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, module, false, new SelectGenerateCallback<Module>() {

			public Select generate(Module t) {
				return MysqlSelect.selectFrom(MODULETABLE).where(
				and(
					MODULETABLE.COMPANY_ID.eq(t.getCompanyId()),
					MODULETABLE.MODULE_ROOT.eq(t.getModuleRoot()),
					MODULETABLE.MODULE_NAME.eq(t.getModuleName()),
					MODULETABLE.MODULE_PARENT.eq(t.getModuleParent()),
					MODULETABLE.MODULE_PATH.eq(t.getModulePath()),
					MODULETABLE.MODULE_GRADE.eq(t.getModuleGrade()),
					MODULETABLE.MODULE_ORDER.eq(t.getModuleOrder()),
					MODULETABLE.MODULE_TYPE.eq(t.getModuleType()),
					MODULETABLE.MODULE_OWNER.eq(t.getModuleOwner()),
					MODULETABLE.MODULE_SPEC.eq(t.getModuleSpec())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Module> modules) {
		if (CollectionUtil.isEmpty(modules)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, modules, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(MODULETABLE).values(
					MODULETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					MODULETABLE.MODULE_ROOT.value(new JdbcNamedParameter("moduleRoot")),
					MODULETABLE.MODULE_NAME.value(new JdbcNamedParameter("moduleName")),
					MODULETABLE.MODULE_PARENT.value(new JdbcNamedParameter("moduleParent")),
					MODULETABLE.MODULE_PATH.value(new JdbcNamedParameter("modulePath")),
					MODULETABLE.MODULE_GRADE.value(new JdbcNamedParameter("moduleGrade")),
					MODULETABLE.MODULE_ORDER.value(new JdbcNamedParameter("moduleOrder")),
					MODULETABLE.MODULE_TYPE.value(new JdbcNamedParameter("moduleType")),
					MODULETABLE.MODULE_OWNER.value(new JdbcNamedParameter("moduleOwner")),
					MODULETABLE.MODULE_SPEC.value(new JdbcNamedParameter("moduleSpec")));
			}
		});
	}

	public int[] batchInsert(List<Module> modules){
			return batchInsert(true ,modules);
	}

	public int[] batchUpdate(List<Module> modules) {
		if (CollectionUtil.isEmpty(modules)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(modules, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(MODULETABLE).set(
					MODULETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					MODULETABLE.MODULE_ROOT.value(new JdbcNamedParameter("moduleRoot")),
					MODULETABLE.MODULE_NAME.value(new JdbcNamedParameter("moduleName")),
					MODULETABLE.MODULE_PARENT.value(new JdbcNamedParameter("moduleParent")),
					MODULETABLE.MODULE_PATH.value(new JdbcNamedParameter("modulePath")),
					MODULETABLE.MODULE_GRADE.value(new JdbcNamedParameter("moduleGrade")),
					MODULETABLE.MODULE_ORDER.value(new JdbcNamedParameter("moduleOrder")),
					MODULETABLE.MODULE_TYPE.value(new JdbcNamedParameter("moduleType")),
					MODULETABLE.MODULE_OWNER.value(new JdbcNamedParameter("moduleOwner")),
					MODULETABLE.MODULE_SPEC.value(new JdbcNamedParameter("moduleSpec"))).where(
				MODULETABLE.MODULE_ID.eq(new JdbcNamedParameter("moduleId")));
			}
		});
	}

	public int[] batchDelete(List<Module> modules) {
		if (CollectionUtil.isEmpty(modules)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(modules, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(MODULETABLE).where(and(
				MODULETABLE.MODULE_ID.eq(new JdbcNamedParameter("moduleId")),
				MODULETABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				MODULETABLE.MODULE_ROOT.eq(new JdbcNamedParameter("moduleRoot")),
				MODULETABLE.MODULE_NAME.eq(new JdbcNamedParameter("moduleName")),
				MODULETABLE.MODULE_PARENT.eq(new JdbcNamedParameter("moduleParent")),
				MODULETABLE.MODULE_PATH.eq(new JdbcNamedParameter("modulePath")),
				MODULETABLE.MODULE_GRADE.eq(new JdbcNamedParameter("moduleGrade")),
				MODULETABLE.MODULE_ORDER.eq(new JdbcNamedParameter("moduleOrder")),
				MODULETABLE.MODULE_TYPE.eq(new JdbcNamedParameter("moduleType")),
				MODULETABLE.MODULE_OWNER.eq(new JdbcNamedParameter("moduleOwner")),
				MODULETABLE.MODULE_SPEC.eq(new JdbcNamedParameter("moduleSpec"))));
			}
		});
	}

}
