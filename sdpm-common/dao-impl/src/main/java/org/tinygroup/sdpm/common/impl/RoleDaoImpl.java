/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.RoleTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Role;
import org.tinygroup.sdpm.common.inter.RoleDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class RoleDaoImpl extends TinyDslDaoSupport implements RoleDao {

	public Role insertObject(Role role) {
		return getDslTemplate().insertObject(role, new InsertGenerateCallback<Role>() {
			public Insert generate(Role t) {
				Insert insert = insertInto(ROLETABLE).values(
					ROLETABLE.ROLE_ID.value(t.getRoleId()),
					ROLETABLE.COMPANY_ID.value(t.getCompanyId()),
					ROLETABLE.ROLE_NAME.value(t.getRoleName()),
					ROLETABLE.ROLE_DESC.value(t.getRoleDesc()));
				return insert;
			}
		});
	}

	public Role insertObject(boolean autoGeneratedKeys ,Role role) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,role, new InsertGenerateCallback<Role>() {

			public Insert generate(Role t) {
				Insert insert = insertInto(ROLETABLE).values(
					ROLETABLE.ROLE_ID.value(t.getRoleId()),
					ROLETABLE.COMPANY_ID.value(t.getCompanyId()),
					ROLETABLE.ROLE_NAME.value(t.getRoleName()),
					ROLETABLE.ROLE_DESC.value(t.getRoleDesc()));
				return insert;
			}
		});
	}

	public int updateObject(Role role) {
		return getDslTemplate().updateObject(role, new UpdateGenerateCallback<Role>() {
			public Update generate(Role t) {
				Update update = update(ROLETABLE).set(
					ROLETABLE.COMPANY_ID.value(t.getCompanyId()),
					ROLETABLE.ROLE_NAME.value(t.getRoleName()),
					ROLETABLE.ROLE_DESC.value(t.getRoleDesc())).where(
					ROLETABLE.ROLE_ID.eq(t.getRoleId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(ROLETABLE).where(ROLETABLE.ROLE_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(ROLETABLE).where(ROLETABLE.ROLE_ID.in(t));
		}
		},pks);
	}

	public Role getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Role.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(ROLETABLE).where(ROLETABLE.ROLE_ID.eq(t));
			}
		});
	}

	public List<Role> queryObjects(Role role) {
		if(role==null){
			role=new Role();
		}
		return getDslTemplate().queryObjects(role, new SelectGenerateCallback<Role>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Role t) {
				return selectFrom(ROLETABLE).where(
				and(
					ROLETABLE.COMPANY_ID.eq(t.getCompanyId()),
					ROLETABLE.ROLE_NAME.eq(t.getRoleName()),
					ROLETABLE.ROLE_DESC.eq(t.getRoleDesc())));
			}
		});
	}

	public Pager<Role> queryObjectsForPage(int start,int limit ,Role role) {
		if(role==null){
			role=new Role();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, role, false, new SelectGenerateCallback<Role>() {

			public Select generate(Role t) {
				return MysqlSelect.selectFrom(ROLETABLE).where(
				and(
					ROLETABLE.COMPANY_ID.eq(t.getCompanyId()),
					ROLETABLE.ROLE_NAME.eq(t.getRoleName()),
					ROLETABLE.ROLE_DESC.eq(t.getRoleDesc())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Role> roles) {
		if (CollectionUtil.isEmpty(roles)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, roles, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(ROLETABLE).values(
					ROLETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					ROLETABLE.ROLE_NAME.value(new JdbcNamedParameter("roleName")),
					ROLETABLE.ROLE_DESC.value(new JdbcNamedParameter("roleDesc")));
			}
		});
	}

	public int[] batchInsert(List<Role> roles){
			return batchInsert(true ,roles);
	}

	public int[] batchUpdate(List<Role> roles) {
		if (CollectionUtil.isEmpty(roles)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(roles, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(ROLETABLE).set(
					ROLETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					ROLETABLE.ROLE_NAME.value(new JdbcNamedParameter("roleName")),
					ROLETABLE.ROLE_DESC.value(new JdbcNamedParameter("roleDesc"))).where(
				ROLETABLE.ROLE_ID.eq(new JdbcNamedParameter("roleId")));
			}
		});
	}

	public int[] batchDelete(List<Role> roles) {
		if (CollectionUtil.isEmpty(roles)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(roles, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(ROLETABLE).where(and(
				ROLETABLE.ROLE_ID.eq(new JdbcNamedParameter("roleId")),
				ROLETABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				ROLETABLE.ROLE_NAME.eq(new JdbcNamedParameter("roleName")),
				ROLETABLE.ROLE_DESC.eq(new JdbcNamedParameter("roleDesc"))));
			}
		});
	}

}
