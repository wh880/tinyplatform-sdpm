/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.DeptTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Dept;
import org.tinygroup.sdpm.common.inter.DeptDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class DeptDaoImpl extends TinyDslDaoSupport implements DeptDao {

	public Dept insertObject(Dept dept) {
		return getDslTemplate().insertObject(dept, new InsertGenerateCallback<Dept>() {
			public Insert generate(Dept t) {
				Insert insert = insertInto(DEPTTABLE).values(
					DEPTTABLE.DEPT_ID.value(t.getDeptId()),
					DEPTTABLE.COMPANY_ID.value(t.getCompanyId()),
					DEPTTABLE.DEPT_NAME.value(t.getDeptName()),
					DEPTTABLE.DEPT_PARENT.value(t.getDeptParent()),
					DEPTTABLE.DEPT_PATH.value(t.getDeptPath()),
					DEPTTABLE.DEPT_GRADE.value(t.getDeptGrade()),
					DEPTTABLE.DEPT_ORDER.value(t.getDeptOrder()),
					DEPTTABLE.DEPT_POSITION.value(t.getDeptPosition()),
					DEPTTABLE.DEPT_FUNCTION.value(t.getDeptFunction()),
					DEPTTABLE.DEPT_MANAGER.value(t.getDeptManager()),
					DEPTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Dept insertObject(boolean autoGeneratedKeys ,Dept dept) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,dept, new InsertGenerateCallback<Dept>() {

			public Insert generate(Dept t) {
				Insert insert = insertInto(DEPTTABLE).values(
					DEPTTABLE.DEPT_ID.value(t.getDeptId()),
					DEPTTABLE.COMPANY_ID.value(t.getCompanyId()),
					DEPTTABLE.DEPT_NAME.value(t.getDeptName()),
					DEPTTABLE.DEPT_PARENT.value(t.getDeptParent()),
					DEPTTABLE.DEPT_PATH.value(t.getDeptPath()),
					DEPTTABLE.DEPT_GRADE.value(t.getDeptGrade()),
					DEPTTABLE.DEPT_ORDER.value(t.getDeptOrder()),
					DEPTTABLE.DEPT_POSITION.value(t.getDeptPosition()),
					DEPTTABLE.DEPT_FUNCTION.value(t.getDeptFunction()),
					DEPTTABLE.DEPT_MANAGER.value(t.getDeptManager()),
					DEPTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Dept dept) {
		return getDslTemplate().updateObject(dept, new UpdateGenerateCallback<Dept>() {
			public Update generate(Dept t) {
				Update update = update(DEPTTABLE).set(
					DEPTTABLE.COMPANY_ID.value(t.getCompanyId()),
					DEPTTABLE.DEPT_NAME.value(t.getDeptName()),
					DEPTTABLE.DEPT_PARENT.value(t.getDeptParent()),
					DEPTTABLE.DEPT_PATH.value(t.getDeptPath()),
					DEPTTABLE.DEPT_GRADE.value(t.getDeptGrade()),
					DEPTTABLE.DEPT_ORDER.value(t.getDeptOrder()),
					DEPTTABLE.DEPT_POSITION.value(t.getDeptPosition()),
					DEPTTABLE.DEPT_FUNCTION.value(t.getDeptFunction()),
					DEPTTABLE.DEPT_MANAGER.value(t.getDeptManager()),
					DEPTTABLE.DELETED.value(t.getDeleted())).where(
					DEPTTABLE.DEPT_ID.eq(t.getDeptId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(DEPTTABLE).where(DEPTTABLE.DEPT_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(DEPTTABLE).where(DEPTTABLE.DEPT_ID.in(t));
		}
		},pks);
	}

	public Dept getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Dept.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(DEPTTABLE).where(DEPTTABLE.DEPT_ID.eq(t));
			}
		});
	}

	public List<Dept> queryObjects(Dept dept) {
		if(dept==null){
			dept=new Dept();
		}
		return getDslTemplate().queryObjects(dept, new SelectGenerateCallback<Dept>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Dept t) {
				return selectFrom(DEPTTABLE).where(
				and(
					DEPTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DEPTTABLE.DEPT_NAME.eq(t.getDeptName()),
					DEPTTABLE.DEPT_PARENT.eq(t.getDeptParent()),
					DEPTTABLE.DEPT_PATH.eq(t.getDeptPath()),
					DEPTTABLE.DEPT_GRADE.eq(t.getDeptGrade()),
					DEPTTABLE.DEPT_ORDER.eq(t.getDeptOrder()),
					DEPTTABLE.DEPT_POSITION.eq(t.getDeptPosition()),
					DEPTTABLE.DEPT_FUNCTION.eq(t.getDeptFunction()),
					DEPTTABLE.DEPT_MANAGER.eq(t.getDeptManager()),
					DEPTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Dept> queryObjectsForPage(int start,int limit ,Dept dept) {
		if(dept==null){
			dept=new Dept();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, dept, false, new SelectGenerateCallback<Dept>() {

			public Select generate(Dept t) {
				return MysqlSelect.selectFrom(DEPTTABLE).where(
				and(
					DEPTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					DEPTTABLE.DEPT_NAME.eq(t.getDeptName()),
					DEPTTABLE.DEPT_PARENT.eq(t.getDeptParent()),
					DEPTTABLE.DEPT_PATH.eq(t.getDeptPath()),
					DEPTTABLE.DEPT_GRADE.eq(t.getDeptGrade()),
					DEPTTABLE.DEPT_ORDER.eq(t.getDeptOrder()),
					DEPTTABLE.DEPT_POSITION.eq(t.getDeptPosition()),
					DEPTTABLE.DEPT_FUNCTION.eq(t.getDeptFunction()),
					DEPTTABLE.DEPT_MANAGER.eq(t.getDeptManager()),
					DEPTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Dept> depts) {
		if (CollectionUtil.isEmpty(depts)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, depts, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(DEPTTABLE).values(
					DEPTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DEPTTABLE.DEPT_NAME.value(new JdbcNamedParameter("deptName")),
					DEPTTABLE.DEPT_PARENT.value(new JdbcNamedParameter("deptParent")),
					DEPTTABLE.DEPT_PATH.value(new JdbcNamedParameter("deptPath")),
					DEPTTABLE.DEPT_GRADE.value(new JdbcNamedParameter("deptGrade")),
					DEPTTABLE.DEPT_ORDER.value(new JdbcNamedParameter("deptOrder")),
					DEPTTABLE.DEPT_POSITION.value(new JdbcNamedParameter("deptPosition")),
					DEPTTABLE.DEPT_FUNCTION.value(new JdbcNamedParameter("deptFunction")),
					DEPTTABLE.DEPT_MANAGER.value(new JdbcNamedParameter("deptManager")),
					DEPTTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Dept> depts){
			return batchInsert(true ,depts);
	}

	public int[] batchUpdate(List<Dept> depts) {
		if (CollectionUtil.isEmpty(depts)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(depts, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(DEPTTABLE).set(
					DEPTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					DEPTTABLE.DEPT_NAME.value(new JdbcNamedParameter("deptName")),
					DEPTTABLE.DEPT_PARENT.value(new JdbcNamedParameter("deptParent")),
					DEPTTABLE.DEPT_PATH.value(new JdbcNamedParameter("deptPath")),
					DEPTTABLE.DEPT_GRADE.value(new JdbcNamedParameter("deptGrade")),
					DEPTTABLE.DEPT_ORDER.value(new JdbcNamedParameter("deptOrder")),
					DEPTTABLE.DEPT_POSITION.value(new JdbcNamedParameter("deptPosition")),
					DEPTTABLE.DEPT_FUNCTION.value(new JdbcNamedParameter("deptFunction")),
					DEPTTABLE.DEPT_MANAGER.value(new JdbcNamedParameter("deptManager")),
					DEPTTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				DEPTTABLE.DEPT_ID.eq(new JdbcNamedParameter("deptId")));
			}
		});
	}

	public int[] batchDelete(List<Dept> depts) {
		if (CollectionUtil.isEmpty(depts)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(depts, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(DEPTTABLE).where(and(
				DEPTTABLE.DEPT_ID.eq(new JdbcNamedParameter("deptId")),
				DEPTTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				DEPTTABLE.DEPT_NAME.eq(new JdbcNamedParameter("deptName")),
				DEPTTABLE.DEPT_PARENT.eq(new JdbcNamedParameter("deptParent")),
				DEPTTABLE.DEPT_PATH.eq(new JdbcNamedParameter("deptPath")),
				DEPTTABLE.DEPT_GRADE.eq(new JdbcNamedParameter("deptGrade")),
				DEPTTABLE.DEPT_ORDER.eq(new JdbcNamedParameter("deptOrder")),
				DEPTTABLE.DEPT_POSITION.eq(new JdbcNamedParameter("deptPosition")),
				DEPTTABLE.DEPT_FUNCTION.eq(new JdbcNamedParameter("deptFunction")),
				DEPTTABLE.DEPT_MANAGER.eq(new JdbcNamedParameter("deptManager")),
				DEPTTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
