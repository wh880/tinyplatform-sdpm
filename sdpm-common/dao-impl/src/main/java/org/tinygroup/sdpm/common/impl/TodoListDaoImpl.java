/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.TodoListTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.TodoList;
import org.tinygroup.sdpm.common.inter.TodoListDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class TodoListDaoImpl extends TinyDslDaoSupport implements TodoListDao {

	public TodoList insertObject(TodoList todoList) {
		return getDslTemplate().insertObject(todoList, new InsertGenerateCallback<TodoList>() {
			public Insert generate(TodoList t) {
				Insert insert = insertInto(TODOLISTTABLE).values(
					TODOLISTTABLE.TODO_ID.value(t.getTodoId()),
					TODOLISTTABLE.COMPANY_ID.value(t.getCompanyId()),
					TODOLISTTABLE.ACCOUNT.value(t.getAccount()),
					TODOLISTTABLE.TODO_DATE.value(t.getTodoDate()),
					TODOLISTTABLE.TODO_BEGIN.value(t.getTodoBegin()),
					TODOLISTTABLE.TODO_END.value(t.getTodoEnd()),
					TODOLISTTABLE.TODO_TYPE.value(t.getTodoType()),
					TODOLISTTABLE.TODO_PRI.value(t.getTodoPri()),
					TODOLISTTABLE.TODO_NAME.value(t.getTodoName()),
					TODOLISTTABLE.TODO_DESC.value(t.getTodoDesc()),
					TODOLISTTABLE.TODO_STATUS.value(t.getTodoStatus()));
				return insert;
			}
		});
	}

	public TodoList insertObject(boolean autoGeneratedKeys ,TodoList todoList) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,todoList, new InsertGenerateCallback<TodoList>() {

			public Insert generate(TodoList t) {
				Insert insert = insertInto(TODOLISTTABLE).values(
					TODOLISTTABLE.TODO_ID.value(t.getTodoId()),
					TODOLISTTABLE.COMPANY_ID.value(t.getCompanyId()),
					TODOLISTTABLE.ACCOUNT.value(t.getAccount()),
					TODOLISTTABLE.TODO_DATE.value(t.getTodoDate()),
					TODOLISTTABLE.TODO_BEGIN.value(t.getTodoBegin()),
					TODOLISTTABLE.TODO_END.value(t.getTodoEnd()),
					TODOLISTTABLE.TODO_TYPE.value(t.getTodoType()),
					TODOLISTTABLE.TODO_PRI.value(t.getTodoPri()),
					TODOLISTTABLE.TODO_NAME.value(t.getTodoName()),
					TODOLISTTABLE.TODO_DESC.value(t.getTodoDesc()),
					TODOLISTTABLE.TODO_STATUS.value(t.getTodoStatus()));
				return insert;
			}
		});
	}

	public int updateObject(TodoList todoList) {
		return getDslTemplate().updateObject(todoList, new UpdateGenerateCallback<TodoList>() {
			public Update generate(TodoList t) {
				Update update = update(TODOLISTTABLE).set(
					TODOLISTTABLE.COMPANY_ID.value(t.getCompanyId()),
					TODOLISTTABLE.ACCOUNT.value(t.getAccount()),
					TODOLISTTABLE.TODO_DATE.value(t.getTodoDate()),
					TODOLISTTABLE.TODO_BEGIN.value(t.getTodoBegin()),
					TODOLISTTABLE.TODO_END.value(t.getTodoEnd()),
					TODOLISTTABLE.TODO_TYPE.value(t.getTodoType()),
					TODOLISTTABLE.TODO_PRI.value(t.getTodoPri()),
					TODOLISTTABLE.TODO_NAME.value(t.getTodoName()),
					TODOLISTTABLE.TODO_DESC.value(t.getTodoDesc()),
					TODOLISTTABLE.TODO_STATUS.value(t.getTodoStatus())).where(
					TODOLISTTABLE.TODO_ID.eq(t.getTodoId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(TODOLISTTABLE).where(TODOLISTTABLE.TODO_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(TODOLISTTABLE).where(TODOLISTTABLE.TODO_ID.in(t));
		}
		},pks);
	}

	public TodoList getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, TodoList.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(TODOLISTTABLE).where(TODOLISTTABLE.TODO_ID.eq(t));
			}
		});
	}

	public List<TodoList> queryObjects(TodoList todoList) {
		if(todoList==null){
			todoList=new TodoList();
		}
		return getDslTemplate().queryObjects(todoList, new SelectGenerateCallback<TodoList>() {

			@SuppressWarnings("rawtypes")
			public Select generate(TodoList t) {
				return selectFrom(TODOLISTTABLE).where(
				and(
					TODOLISTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					TODOLISTTABLE.ACCOUNT.eq(t.getAccount()),
					TODOLISTTABLE.TODO_DATE.eq(t.getTodoDate()),
					TODOLISTTABLE.TODO_BEGIN.eq(t.getTodoBegin()),
					TODOLISTTABLE.TODO_END.eq(t.getTodoEnd()),
					TODOLISTTABLE.TODO_TYPE.eq(t.getTodoType()),
					TODOLISTTABLE.TODO_PRI.eq(t.getTodoPri()),
					TODOLISTTABLE.TODO_NAME.eq(t.getTodoName()),
					TODOLISTTABLE.TODO_DESC.eq(t.getTodoDesc()),
					TODOLISTTABLE.TODO_STATUS.eq(t.getTodoStatus())));
			}
		});
	}

	public Pager<TodoList> queryObjectsForPage(int start,int limit ,TodoList todoList) {
		if(todoList==null){
			todoList=new TodoList();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, todoList, false, new SelectGenerateCallback<TodoList>() {

			public Select generate(TodoList t) {
				return MysqlSelect.selectFrom(TODOLISTTABLE).where(
				and(
					TODOLISTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					TODOLISTTABLE.ACCOUNT.eq(t.getAccount()),
					TODOLISTTABLE.TODO_DATE.eq(t.getTodoDate()),
					TODOLISTTABLE.TODO_BEGIN.eq(t.getTodoBegin()),
					TODOLISTTABLE.TODO_END.eq(t.getTodoEnd()),
					TODOLISTTABLE.TODO_TYPE.eq(t.getTodoType()),
					TODOLISTTABLE.TODO_PRI.eq(t.getTodoPri()),
					TODOLISTTABLE.TODO_NAME.eq(t.getTodoName()),
					TODOLISTTABLE.TODO_DESC.eq(t.getTodoDesc()),
					TODOLISTTABLE.TODO_STATUS.eq(t.getTodoStatus())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<TodoList> todoLists) {
		if (CollectionUtil.isEmpty(todoLists)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, todoLists, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(TODOLISTTABLE).values(
					TODOLISTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					TODOLISTTABLE.ACCOUNT.value(new JdbcNamedParameter("account")),
					TODOLISTTABLE.TODO_DATE.value(new JdbcNamedParameter("todoDate")),
					TODOLISTTABLE.TODO_BEGIN.value(new JdbcNamedParameter("todoBegin")),
					TODOLISTTABLE.TODO_END.value(new JdbcNamedParameter("todoEnd")),
					TODOLISTTABLE.TODO_TYPE.value(new JdbcNamedParameter("todoType")),
					TODOLISTTABLE.TODO_PRI.value(new JdbcNamedParameter("todoPri")),
					TODOLISTTABLE.TODO_NAME.value(new JdbcNamedParameter("todoName")),
					TODOLISTTABLE.TODO_DESC.value(new JdbcNamedParameter("todoDesc")),
					TODOLISTTABLE.TODO_STATUS.value(new JdbcNamedParameter("todoStatus")));
			}
		});
	}

	public int[] batchInsert(List<TodoList> todoLists){
			return batchInsert(true ,todoLists);
	}

	public int[] batchUpdate(List<TodoList> todoLists) {
		if (CollectionUtil.isEmpty(todoLists)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(todoLists, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(TODOLISTTABLE).set(
					TODOLISTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					TODOLISTTABLE.ACCOUNT.value(new JdbcNamedParameter("account")),
					TODOLISTTABLE.TODO_DATE.value(new JdbcNamedParameter("todoDate")),
					TODOLISTTABLE.TODO_BEGIN.value(new JdbcNamedParameter("todoBegin")),
					TODOLISTTABLE.TODO_END.value(new JdbcNamedParameter("todoEnd")),
					TODOLISTTABLE.TODO_TYPE.value(new JdbcNamedParameter("todoType")),
					TODOLISTTABLE.TODO_PRI.value(new JdbcNamedParameter("todoPri")),
					TODOLISTTABLE.TODO_NAME.value(new JdbcNamedParameter("todoName")),
					TODOLISTTABLE.TODO_DESC.value(new JdbcNamedParameter("todoDesc")),
					TODOLISTTABLE.TODO_STATUS.value(new JdbcNamedParameter("todoStatus"))).where(
				TODOLISTTABLE.TODO_ID.eq(new JdbcNamedParameter("todoId")));
			}
		});
	}

	public int[] batchDelete(List<TodoList> todoLists) {
		if (CollectionUtil.isEmpty(todoLists)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(todoLists, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(TODOLISTTABLE).where(and(
				TODOLISTTABLE.TODO_ID.eq(new JdbcNamedParameter("todoId")),
				TODOLISTTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				TODOLISTTABLE.ACCOUNT.eq(new JdbcNamedParameter("account")),
				TODOLISTTABLE.TODO_DATE.eq(new JdbcNamedParameter("todoDate")),
				TODOLISTTABLE.TODO_BEGIN.eq(new JdbcNamedParameter("todoBegin")),
				TODOLISTTABLE.TODO_END.eq(new JdbcNamedParameter("todoEnd")),
				TODOLISTTABLE.TODO_TYPE.eq(new JdbcNamedParameter("todoType")),
				TODOLISTTABLE.TODO_PRI.eq(new JdbcNamedParameter("todoPri")),
				TODOLISTTABLE.TODO_NAME.eq(new JdbcNamedParameter("todoName")),
				TODOLISTTABLE.TODO_DESC.eq(new JdbcNamedParameter("todoDesc")),
				TODOLISTTABLE.TODO_STATUS.eq(new JdbcNamedParameter("todoStatus"))));
			}
		});
	}

}
