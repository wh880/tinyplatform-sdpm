/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.CompanyTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Company;
import org.tinygroup.sdpm.common.inter.CompanyDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class CompanyDaoImpl extends TinyDslDaoSupport implements CompanyDao {

	public Company insertObject(Company company) {
		return getDslTemplate().insertObject(company, new InsertGenerateCallback<Company>() {
			public Insert generate(Company t) {
				Insert insert = insertInto(COMPANYTABLE).values(
					COMPANYTABLE.COMPANY_ID.value(t.getCompanyId()),
					COMPANYTABLE.COMPANY_NAME.value(t.getCompanyName()),
					COMPANYTABLE.COMPANY_PHONE.value(t.getCompanyPhone()),
					COMPANYTABLE.COMPANY_FAX.value(t.getCompanyFax()),
					COMPANYTABLE.COMPANY_ADDRESS.value(t.getCompanyAddress()),
					COMPANYTABLE.COMPANY_ZIPCODE.value(t.getCompanyZipcode()),
					COMPANYTABLE.COMPANY_WEBSITE.value(t.getCompanyWebsite()),
					COMPANYTABLE.COMPANY_HOME.value(t.getCompanyHome()),
					COMPANYTABLE.COMPANY_WEIBO.value(t.getCompanyWeibo()),
					COMPANYTABLE.ADMINS.value(t.getAdmins()),
					COMPANYTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public Company insertObject(boolean autoGeneratedKeys ,Company company) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,company, new InsertGenerateCallback<Company>() {

			public Insert generate(Company t) {
				Insert insert = insertInto(COMPANYTABLE).values(
					COMPANYTABLE.COMPANY_ID.value(t.getCompanyId()),
					COMPANYTABLE.COMPANY_NAME.value(t.getCompanyName()),
					COMPANYTABLE.COMPANY_PHONE.value(t.getCompanyPhone()),
					COMPANYTABLE.COMPANY_FAX.value(t.getCompanyFax()),
					COMPANYTABLE.COMPANY_ADDRESS.value(t.getCompanyAddress()),
					COMPANYTABLE.COMPANY_ZIPCODE.value(t.getCompanyZipcode()),
					COMPANYTABLE.COMPANY_WEBSITE.value(t.getCompanyWebsite()),
					COMPANYTABLE.COMPANY_HOME.value(t.getCompanyHome()),
					COMPANYTABLE.COMPANY_WEIBO.value(t.getCompanyWeibo()),
					COMPANYTABLE.ADMINS.value(t.getAdmins()),
					COMPANYTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(Company company) {
		return getDslTemplate().updateObject(company, new UpdateGenerateCallback<Company>() {
			public Update generate(Company t) {
				Update update = update(COMPANYTABLE).set(
					COMPANYTABLE.COMPANY_NAME.value(t.getCompanyName()),
					COMPANYTABLE.COMPANY_PHONE.value(t.getCompanyPhone()),
					COMPANYTABLE.COMPANY_FAX.value(t.getCompanyFax()),
					COMPANYTABLE.COMPANY_ADDRESS.value(t.getCompanyAddress()),
					COMPANYTABLE.COMPANY_ZIPCODE.value(t.getCompanyZipcode()),
					COMPANYTABLE.COMPANY_WEBSITE.value(t.getCompanyWebsite()),
					COMPANYTABLE.COMPANY_HOME.value(t.getCompanyHome()),
					COMPANYTABLE.COMPANY_WEIBO.value(t.getCompanyWeibo()),
					COMPANYTABLE.ADMINS.value(t.getAdmins()),
					COMPANYTABLE.DELETED.value(t.getDeleted())).where(
					COMPANYTABLE.COMPANY_ID.eq(t.getCompanyId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(COMPANYTABLE).where(COMPANYTABLE.COMPANY_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(COMPANYTABLE).where(COMPANYTABLE.COMPANY_ID.in(t));
		}
		},pks);
	}

	public Company getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Company.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(COMPANYTABLE).where(COMPANYTABLE.COMPANY_ID.eq(t));
			}
		});
	}

	public List<Company> queryObjects(Company company) {
		if(company==null){
			company=new Company();
		}
		return getDslTemplate().queryObjects(company, new SelectGenerateCallback<Company>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Company t) {
				return selectFrom(COMPANYTABLE).where(
				and(
					COMPANYTABLE.COMPANY_NAME.eq(t.getCompanyName()),
					COMPANYTABLE.COMPANY_PHONE.eq(t.getCompanyPhone()),
					COMPANYTABLE.COMPANY_FAX.eq(t.getCompanyFax()),
					COMPANYTABLE.COMPANY_ADDRESS.eq(t.getCompanyAddress()),
					COMPANYTABLE.COMPANY_ZIPCODE.eq(t.getCompanyZipcode()),
					COMPANYTABLE.COMPANY_WEBSITE.eq(t.getCompanyWebsite()),
					COMPANYTABLE.COMPANY_HOME.eq(t.getCompanyHome()),
					COMPANYTABLE.COMPANY_WEIBO.eq(t.getCompanyWeibo()),
					COMPANYTABLE.ADMINS.eq(t.getAdmins()),
					COMPANYTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<Company> queryObjectsForPage(int start,int limit ,Company company) {
		if(company==null){
			company=new Company();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, company, false, new SelectGenerateCallback<Company>() {

			public Select generate(Company t) {
				return MysqlSelect.selectFrom(COMPANYTABLE).where(
				and(
					COMPANYTABLE.COMPANY_NAME.eq(t.getCompanyName()),
					COMPANYTABLE.COMPANY_PHONE.eq(t.getCompanyPhone()),
					COMPANYTABLE.COMPANY_FAX.eq(t.getCompanyFax()),
					COMPANYTABLE.COMPANY_ADDRESS.eq(t.getCompanyAddress()),
					COMPANYTABLE.COMPANY_ZIPCODE.eq(t.getCompanyZipcode()),
					COMPANYTABLE.COMPANY_WEBSITE.eq(t.getCompanyWebsite()),
					COMPANYTABLE.COMPANY_HOME.eq(t.getCompanyHome()),
					COMPANYTABLE.COMPANY_WEIBO.eq(t.getCompanyWeibo()),
					COMPANYTABLE.ADMINS.eq(t.getAdmins()),
					COMPANYTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Company> companys) {
		if (CollectionUtil.isEmpty(companys)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, companys, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(COMPANYTABLE).values(
					COMPANYTABLE.COMPANY_NAME.value(new JdbcNamedParameter("companyName")),
					COMPANYTABLE.COMPANY_PHONE.value(new JdbcNamedParameter("companyPhone")),
					COMPANYTABLE.COMPANY_FAX.value(new JdbcNamedParameter("companyFax")),
					COMPANYTABLE.COMPANY_ADDRESS.value(new JdbcNamedParameter("companyAddress")),
					COMPANYTABLE.COMPANY_ZIPCODE.value(new JdbcNamedParameter("companyZipcode")),
					COMPANYTABLE.COMPANY_WEBSITE.value(new JdbcNamedParameter("companyWebsite")),
					COMPANYTABLE.COMPANY_HOME.value(new JdbcNamedParameter("companyHome")),
					COMPANYTABLE.COMPANY_WEIBO.value(new JdbcNamedParameter("companyWeibo")),
					COMPANYTABLE.ADMINS.value(new JdbcNamedParameter("admins")),
					COMPANYTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<Company> companys){
			return batchInsert(true ,companys);
	}

	public int[] batchUpdate(List<Company> companys) {
		if (CollectionUtil.isEmpty(companys)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(companys, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(COMPANYTABLE).set(
					COMPANYTABLE.COMPANY_NAME.value(new JdbcNamedParameter("companyName")),
					COMPANYTABLE.COMPANY_PHONE.value(new JdbcNamedParameter("companyPhone")),
					COMPANYTABLE.COMPANY_FAX.value(new JdbcNamedParameter("companyFax")),
					COMPANYTABLE.COMPANY_ADDRESS.value(new JdbcNamedParameter("companyAddress")),
					COMPANYTABLE.COMPANY_ZIPCODE.value(new JdbcNamedParameter("companyZipcode")),
					COMPANYTABLE.COMPANY_WEBSITE.value(new JdbcNamedParameter("companyWebsite")),
					COMPANYTABLE.COMPANY_HOME.value(new JdbcNamedParameter("companyHome")),
					COMPANYTABLE.COMPANY_WEIBO.value(new JdbcNamedParameter("companyWeibo")),
					COMPANYTABLE.ADMINS.value(new JdbcNamedParameter("admins")),
					COMPANYTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				COMPANYTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")));
			}
		});
	}

	public int[] batchDelete(List<Company> companys) {
		if (CollectionUtil.isEmpty(companys)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(companys, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(COMPANYTABLE).where(and(
				COMPANYTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				COMPANYTABLE.COMPANY_NAME.eq(new JdbcNamedParameter("companyName")),
				COMPANYTABLE.COMPANY_PHONE.eq(new JdbcNamedParameter("companyPhone")),
				COMPANYTABLE.COMPANY_FAX.eq(new JdbcNamedParameter("companyFax")),
				COMPANYTABLE.COMPANY_ADDRESS.eq(new JdbcNamedParameter("companyAddress")),
				COMPANYTABLE.COMPANY_ZIPCODE.eq(new JdbcNamedParameter("companyZipcode")),
				COMPANYTABLE.COMPANY_WEBSITE.eq(new JdbcNamedParameter("companyWebsite")),
				COMPANYTABLE.COMPANY_HOME.eq(new JdbcNamedParameter("companyHome")),
				COMPANYTABLE.COMPANY_WEIBO.eq(new JdbcNamedParameter("companyWeibo")),
				COMPANYTABLE.ADMINS.eq(new JdbcNamedParameter("admins")),
				COMPANYTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
