/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.HdateTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Hdate;
import org.tinygroup.sdpm.common.inter.HdateDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class HdateDaoImpl extends TinyDslDaoSupport implements HdateDao {

	public Hdate insertObject(Hdate hdate) {
		return getDslTemplate().insertObject(hdate, new InsertGenerateCallback<Hdate>() {
			public Insert generate(Hdate t) {
				Insert insert = insertInto(HDATETABLE).values(
					HDATETABLE.HDATE_ID.value(t.getHdateId()),
					HDATETABLE.COMPANY_ID.value(t.getCompanyId()),
					HDATETABLE.HDATE.value(t.getHdate()),
					HDATETABLE.HDATE_NAME.value(t.getHdateName()),
					HDATETABLE.HDATE_SPEC.value(t.getHdateSpec()));
				return insert;
			}
		});
	}

	public Hdate insertObject(boolean autoGeneratedKeys ,Hdate hdate) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,hdate, new InsertGenerateCallback<Hdate>() {

			public Insert generate(Hdate t) {
				Insert insert = insertInto(HDATETABLE).values(
					HDATETABLE.HDATE_ID.value(t.getHdateId()),
					HDATETABLE.COMPANY_ID.value(t.getCompanyId()),
					HDATETABLE.HDATE.value(t.getHdate()),
					HDATETABLE.HDATE_NAME.value(t.getHdateName()),
					HDATETABLE.HDATE_SPEC.value(t.getHdateSpec()));
				return insert;
			}
		});
	}

	public int updateObject(Hdate hdate) {
		return getDslTemplate().updateObject(hdate, new UpdateGenerateCallback<Hdate>() {
			public Update generate(Hdate t) {
				Update update = update(HDATETABLE).set(
					HDATETABLE.COMPANY_ID.value(t.getCompanyId()),
					HDATETABLE.HDATE.value(t.getHdate()),
					HDATETABLE.HDATE_NAME.value(t.getHdateName()),
					HDATETABLE.HDATE_SPEC.value(t.getHdateSpec())).where(
					HDATETABLE.HDATE_ID.eq(t.getHdateId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(HDATETABLE).where(HDATETABLE.HDATE_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(HDATETABLE).where(HDATETABLE.HDATE_ID.in(t));
		}
		},pks);
	}

	public Hdate getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Hdate.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(HDATETABLE).where(HDATETABLE.HDATE_ID.eq(t));
			}
		});
	}

	public List<Hdate> queryObjects(Hdate hdate) {
		if(hdate==null){
			hdate=new Hdate();
		}
		return getDslTemplate().queryObjects(hdate, new SelectGenerateCallback<Hdate>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Hdate t) {
				return selectFrom(HDATETABLE).where(
				and(
					HDATETABLE.COMPANY_ID.eq(t.getCompanyId()),
					HDATETABLE.HDATE.eq(t.getHdate()),
					HDATETABLE.HDATE_NAME.eq(t.getHdateName()),
					HDATETABLE.HDATE_SPEC.eq(t.getHdateSpec())));
			}
		});
	}

	public Pager<Hdate> queryObjectsForPage(int start,int limit ,Hdate hdate) {
		if(hdate==null){
			hdate=new Hdate();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, hdate, false, new SelectGenerateCallback<Hdate>() {

			public Select generate(Hdate t) {
				return MysqlSelect.selectFrom(HDATETABLE).where(
				and(
					HDATETABLE.COMPANY_ID.eq(t.getCompanyId()),
					HDATETABLE.HDATE.eq(t.getHdate()),
					HDATETABLE.HDATE_NAME.eq(t.getHdateName()),
					HDATETABLE.HDATE_SPEC.eq(t.getHdateSpec())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Hdate> hdates) {
		if (CollectionUtil.isEmpty(hdates)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, hdates, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(HDATETABLE).values(
					HDATETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					HDATETABLE.HDATE.value(new JdbcNamedParameter("hdate")),
					HDATETABLE.HDATE_NAME.value(new JdbcNamedParameter("hdateName")),
					HDATETABLE.HDATE_SPEC.value(new JdbcNamedParameter("hdateSpec")));
			}
		});
	}

	public int[] batchInsert(List<Hdate> hdates){
			return batchInsert(true ,hdates);
	}

	public int[] batchUpdate(List<Hdate> hdates) {
		if (CollectionUtil.isEmpty(hdates)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(hdates, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(HDATETABLE).set(
					HDATETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					HDATETABLE.HDATE.value(new JdbcNamedParameter("hdate")),
					HDATETABLE.HDATE_NAME.value(new JdbcNamedParameter("hdateName")),
					HDATETABLE.HDATE_SPEC.value(new JdbcNamedParameter("hdateSpec"))).where(
				HDATETABLE.HDATE_ID.eq(new JdbcNamedParameter("hdateId")));
			}
		});
	}

	public int[] batchDelete(List<Hdate> hdates) {
		if (CollectionUtil.isEmpty(hdates)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(hdates, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(HDATETABLE).where(and(
				HDATETABLE.HDATE_ID.eq(new JdbcNamedParameter("hdateId")),
				HDATETABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				HDATETABLE.HDATE.eq(new JdbcNamedParameter("hdate")),
				HDATETABLE.HDATE_NAME.eq(new JdbcNamedParameter("hdateName")),
				HDATETABLE.HDATE_SPEC.eq(new JdbcNamedParameter("hdateSpec"))));
			}
		});
	}

}
