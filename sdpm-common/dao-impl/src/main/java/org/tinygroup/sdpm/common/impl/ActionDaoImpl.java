/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.ActionTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Action;
import org.tinygroup.sdpm.common.inter.ActionDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class ActionDaoImpl extends TinyDslDaoSupport implements ActionDao {

	public Action insertObject(Action action) {
		return getDslTemplate().insertObject(action, new InsertGenerateCallback<Action>() {
			public Insert generate(Action t) {
				Insert insert = insertInto(ACTIONTABLE).values(
					ACTIONTABLE.ACTION_ID.value(t.getActionId()),
					ACTIONTABLE.COMPANY_ID.value(t.getCompanyId()),
					ACTIONTABLE.OBJECT_TYPE.value(t.getObjectType()),
					ACTIONTABLE.OBJECT_ID.value(t.getObjectId()),
					ACTIONTABLE.PRODUCT_LIST.value(t.getProductList()),
					ACTIONTABLE.PROJECT_ID.value(t.getProjectId()),
					ACTIONTABLE.ACTOR.value(t.getActor()),
					ACTIONTABLE.ACTION.value(t.getAction()),
					ACTIONTABLE.ACTION_DATE.value(t.getActionDate()),
					ACTIONTABLE.ACTION_COMMENT.value(t.getActionComment()),
					ACTIONTABLE.ACTION_EXTRA.value(t.getActionExtra()));
				return insert;
			}
		});
	}

	public Action insertObject(boolean autoGeneratedKeys ,Action action) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,action, new InsertGenerateCallback<Action>() {

			public Insert generate(Action t) {
				Insert insert = insertInto(ACTIONTABLE).values(
					ACTIONTABLE.ACTION_ID.value(t.getActionId()),
					ACTIONTABLE.COMPANY_ID.value(t.getCompanyId()),
					ACTIONTABLE.OBJECT_TYPE.value(t.getObjectType()),
					ACTIONTABLE.OBJECT_ID.value(t.getObjectId()),
					ACTIONTABLE.PRODUCT_LIST.value(t.getProductList()),
					ACTIONTABLE.PROJECT_ID.value(t.getProjectId()),
					ACTIONTABLE.ACTOR.value(t.getActor()),
					ACTIONTABLE.ACTION.value(t.getAction()),
					ACTIONTABLE.ACTION_DATE.value(t.getActionDate()),
					ACTIONTABLE.ACTION_COMMENT.value(t.getActionComment()),
					ACTIONTABLE.ACTION_EXTRA.value(t.getActionExtra()));
				return insert;
			}
		});
	}

	public int updateObject(Action action) {
		return getDslTemplate().updateObject(action, new UpdateGenerateCallback<Action>() {
			public Update generate(Action t) {
				Update update = update(ACTIONTABLE).set(
					ACTIONTABLE.COMPANY_ID.value(t.getCompanyId()),
					ACTIONTABLE.OBJECT_TYPE.value(t.getObjectType()),
					ACTIONTABLE.OBJECT_ID.value(t.getObjectId()),
					ACTIONTABLE.PRODUCT_LIST.value(t.getProductList()),
					ACTIONTABLE.PROJECT_ID.value(t.getProjectId()),
					ACTIONTABLE.ACTOR.value(t.getActor()),
					ACTIONTABLE.ACTION.value(t.getAction()),
					ACTIONTABLE.ACTION_DATE.value(t.getActionDate()),
					ACTIONTABLE.ACTION_COMMENT.value(t.getActionComment()),
					ACTIONTABLE.ACTION_EXTRA.value(t.getActionExtra())).where(
					ACTIONTABLE.ACTION_ID.eq(t.getActionId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(ACTIONTABLE).where(ACTIONTABLE.ACTION_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(ACTIONTABLE).where(ACTIONTABLE.ACTION_ID.in(t));
		}
		},pks);
	}

	public Action getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Action.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(ACTIONTABLE).where(ACTIONTABLE.ACTION_ID.eq(t));
			}
		});
	}

	public List<Action> queryObjects(Action action) {
		if(action==null){
			action=new Action();
		}
		return getDslTemplate().queryObjects(action, new SelectGenerateCallback<Action>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Action t) {
				return selectFrom(ACTIONTABLE).where(
				and(
					ACTIONTABLE.COMPANY_ID.eq(t.getCompanyId()),
					ACTIONTABLE.OBJECT_TYPE.eq(t.getObjectType()),
					ACTIONTABLE.OBJECT_ID.eq(t.getObjectId()),
					ACTIONTABLE.PRODUCT_LIST.eq(t.getProductList()),
					ACTIONTABLE.PROJECT_ID.eq(t.getProjectId()),
					ACTIONTABLE.ACTOR.eq(t.getActor()),
					ACTIONTABLE.ACTION.eq(t.getAction()),
					ACTIONTABLE.ACTION_DATE.eq(t.getActionDate()),
					ACTIONTABLE.ACTION_COMMENT.eq(t.getActionComment()),
					ACTIONTABLE.ACTION_EXTRA.eq(t.getActionExtra())));
			}
		});
	}

	public Pager<Action> queryObjectsForPage(int start,int limit ,Action action) {
		if(action==null){
			action=new Action();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, action, false, new SelectGenerateCallback<Action>() {

			public Select generate(Action t) {
				return MysqlSelect.selectFrom(ACTIONTABLE).where(
				and(
					ACTIONTABLE.COMPANY_ID.eq(t.getCompanyId()),
					ACTIONTABLE.OBJECT_TYPE.eq(t.getObjectType()),
					ACTIONTABLE.OBJECT_ID.eq(t.getObjectId()),
					ACTIONTABLE.PRODUCT_LIST.eq(t.getProductList()),
					ACTIONTABLE.PROJECT_ID.eq(t.getProjectId()),
					ACTIONTABLE.ACTOR.eq(t.getActor()),
					ACTIONTABLE.ACTION.eq(t.getAction()),
					ACTIONTABLE.ACTION_DATE.eq(t.getActionDate()),
					ACTIONTABLE.ACTION_COMMENT.eq(t.getActionComment()),
					ACTIONTABLE.ACTION_EXTRA.eq(t.getActionExtra())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Action> actions) {
		if (CollectionUtil.isEmpty(actions)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, actions, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(ACTIONTABLE).values(
					ACTIONTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					ACTIONTABLE.OBJECT_TYPE.value(new JdbcNamedParameter("objectType")),
					ACTIONTABLE.OBJECT_ID.value(new JdbcNamedParameter("objectId")),
					ACTIONTABLE.PRODUCT_LIST.value(new JdbcNamedParameter("productList")),
					ACTIONTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					ACTIONTABLE.ACTOR.value(new JdbcNamedParameter("actor")),
					ACTIONTABLE.ACTION.value(new JdbcNamedParameter("action")),
					ACTIONTABLE.ACTION_DATE.value(new JdbcNamedParameter("actionDate")),
					ACTIONTABLE.ACTION_COMMENT.value(new JdbcNamedParameter("actionComment")),
					ACTIONTABLE.ACTION_EXTRA.value(new JdbcNamedParameter("actionExtra")));
			}
		});
	}

	public int[] batchInsert(List<Action> actions){
			return batchInsert(true ,actions);
	}

	public int[] batchUpdate(List<Action> actions) {
		if (CollectionUtil.isEmpty(actions)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(actions, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(ACTIONTABLE).set(
					ACTIONTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					ACTIONTABLE.OBJECT_TYPE.value(new JdbcNamedParameter("objectType")),
					ACTIONTABLE.OBJECT_ID.value(new JdbcNamedParameter("objectId")),
					ACTIONTABLE.PRODUCT_LIST.value(new JdbcNamedParameter("productList")),
					ACTIONTABLE.PROJECT_ID.value(new JdbcNamedParameter("projectId")),
					ACTIONTABLE.ACTOR.value(new JdbcNamedParameter("actor")),
					ACTIONTABLE.ACTION.value(new JdbcNamedParameter("action")),
					ACTIONTABLE.ACTION_DATE.value(new JdbcNamedParameter("actionDate")),
					ACTIONTABLE.ACTION_COMMENT.value(new JdbcNamedParameter("actionComment")),
					ACTIONTABLE.ACTION_EXTRA.value(new JdbcNamedParameter("actionExtra"))).where(
				ACTIONTABLE.ACTION_ID.eq(new JdbcNamedParameter("actionId")));
			}
		});
	}

	public int[] batchDelete(List<Action> actions) {
		if (CollectionUtil.isEmpty(actions)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(actions, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(ACTIONTABLE).where(and(
				ACTIONTABLE.ACTION_ID.eq(new JdbcNamedParameter("actionId")),
				ACTIONTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				ACTIONTABLE.OBJECT_TYPE.eq(new JdbcNamedParameter("objectType")),
				ACTIONTABLE.OBJECT_ID.eq(new JdbcNamedParameter("objectId")),
				ACTIONTABLE.PRODUCT_LIST.eq(new JdbcNamedParameter("productList")),
				ACTIONTABLE.PROJECT_ID.eq(new JdbcNamedParameter("projectId")),
				ACTIONTABLE.ACTOR.eq(new JdbcNamedParameter("actor")),
				ACTIONTABLE.ACTION.eq(new JdbcNamedParameter("action")),
				ACTIONTABLE.ACTION_DATE.eq(new JdbcNamedParameter("actionDate")),
				ACTIONTABLE.ACTION_COMMENT.eq(new JdbcNamedParameter("actionComment")),
				ACTIONTABLE.ACTION_EXTRA.eq(new JdbcNamedParameter("actionExtra"))));
			}
		});
	}

}
