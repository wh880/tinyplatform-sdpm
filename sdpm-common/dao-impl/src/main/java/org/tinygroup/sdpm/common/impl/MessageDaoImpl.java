/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.common.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.common.constant.MessageTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.common.pojo.Message;
import org.tinygroup.sdpm.common.inter.MessageDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class MessageDaoImpl extends TinyDslDaoSupport implements MessageDao {

	public Message insertObject(Message message) {
		return getDslTemplate().insertObject(message, new InsertGenerateCallback<Message>() {
			public Insert generate(Message t) {
				Insert insert = insertInto(MESSAGETABLE).values(
					MESSAGETABLE.MESSAGE_ID.value(t.getMessageId()),
					MESSAGETABLE.COMPANY_ID.value(t.getCompanyId()),
					MESSAGETABLE.MESSAGE_SENDER.value(t.getMessageSender()),
					MESSAGETABLE.MESSAGE_RECEIVER.value(t.getMessageReceiver()),
					MESSAGETABLE.MESSAGE_SENDDATE.value(t.getMessageSenddate()),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.value(t.getMessageReceivedate()),
					MESSAGETABLE.MESSAGE_CONTENT.value(t.getMessageContent()),
					MESSAGETABLE.MESSAGE_TYPE.value(t.getMessageType()),
					MESSAGETABLE.MESSAGE_LEVEL.value(t.getMessageLevel()),
					MESSAGETABLE.MESSAGE_FLAG.value(t.getMessageFlag()));
				return insert;
			}
		});
	}

	public Message insertObject(boolean autoGeneratedKeys ,Message message) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,message, new InsertGenerateCallback<Message>() {

			public Insert generate(Message t) {
				Insert insert = insertInto(MESSAGETABLE).values(
					MESSAGETABLE.MESSAGE_ID.value(t.getMessageId()),
					MESSAGETABLE.COMPANY_ID.value(t.getCompanyId()),
					MESSAGETABLE.MESSAGE_SENDER.value(t.getMessageSender()),
					MESSAGETABLE.MESSAGE_RECEIVER.value(t.getMessageReceiver()),
					MESSAGETABLE.MESSAGE_SENDDATE.value(t.getMessageSenddate()),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.value(t.getMessageReceivedate()),
					MESSAGETABLE.MESSAGE_CONTENT.value(t.getMessageContent()),
					MESSAGETABLE.MESSAGE_TYPE.value(t.getMessageType()),
					MESSAGETABLE.MESSAGE_LEVEL.value(t.getMessageLevel()),
					MESSAGETABLE.MESSAGE_FLAG.value(t.getMessageFlag()));
				return insert;
			}
		});
	}

	public int updateObject(Message message) {
		return getDslTemplate().updateObject(message, new UpdateGenerateCallback<Message>() {
			public Update generate(Message t) {
				Update update = update(MESSAGETABLE).set(
					MESSAGETABLE.COMPANY_ID.value(t.getCompanyId()),
					MESSAGETABLE.MESSAGE_SENDER.value(t.getMessageSender()),
					MESSAGETABLE.MESSAGE_RECEIVER.value(t.getMessageReceiver()),
					MESSAGETABLE.MESSAGE_SENDDATE.value(t.getMessageSenddate()),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.value(t.getMessageReceivedate()),
					MESSAGETABLE.MESSAGE_CONTENT.value(t.getMessageContent()),
					MESSAGETABLE.MESSAGE_TYPE.value(t.getMessageType()),
					MESSAGETABLE.MESSAGE_LEVEL.value(t.getMessageLevel()),
					MESSAGETABLE.MESSAGE_FLAG.value(t.getMessageFlag())).where(
					MESSAGETABLE.MESSAGE_ID.eq(t.getMessageId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(MESSAGETABLE).where(MESSAGETABLE.MESSAGE_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(MESSAGETABLE).where(MESSAGETABLE.MESSAGE_ID.in(t));
		}
		},pks);
	}

	public Message getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, Message.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(MESSAGETABLE).where(MESSAGETABLE.MESSAGE_ID.eq(t));
			}
		});
	}

	public List<Message> queryObjects(Message message) {
		if(message==null){
			message=new Message();
		}
		return getDslTemplate().queryObjects(message, new SelectGenerateCallback<Message>() {

			@SuppressWarnings("rawtypes")
			public Select generate(Message t) {
				return selectFrom(MESSAGETABLE).where(
				and(
					MESSAGETABLE.COMPANY_ID.eq(t.getCompanyId()),
					MESSAGETABLE.MESSAGE_SENDER.eq(t.getMessageSender()),
					MESSAGETABLE.MESSAGE_RECEIVER.eq(t.getMessageReceiver()),
					MESSAGETABLE.MESSAGE_SENDDATE.eq(t.getMessageSenddate()),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.eq(t.getMessageReceivedate()),
					MESSAGETABLE.MESSAGE_CONTENT.eq(t.getMessageContent()),
					MESSAGETABLE.MESSAGE_TYPE.eq(t.getMessageType()),
					MESSAGETABLE.MESSAGE_LEVEL.eq(t.getMessageLevel()),
					MESSAGETABLE.MESSAGE_FLAG.eq(t.getMessageFlag())));
			}
		});
	}

	public Pager<Message> queryObjectsForPage(int start,int limit ,Message message) {
		if(message==null){
			message=new Message();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, message, false, new SelectGenerateCallback<Message>() {

			public Select generate(Message t) {
				return MysqlSelect.selectFrom(MESSAGETABLE).where(
				and(
					MESSAGETABLE.COMPANY_ID.eq(t.getCompanyId()),
					MESSAGETABLE.MESSAGE_SENDER.eq(t.getMessageSender()),
					MESSAGETABLE.MESSAGE_RECEIVER.eq(t.getMessageReceiver()),
					MESSAGETABLE.MESSAGE_SENDDATE.eq(t.getMessageSenddate()),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.eq(t.getMessageReceivedate()),
					MESSAGETABLE.MESSAGE_CONTENT.eq(t.getMessageContent()),
					MESSAGETABLE.MESSAGE_TYPE.eq(t.getMessageType()),
					MESSAGETABLE.MESSAGE_LEVEL.eq(t.getMessageLevel()),
					MESSAGETABLE.MESSAGE_FLAG.eq(t.getMessageFlag())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<Message> messages) {
		if (CollectionUtil.isEmpty(messages)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, messages, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(MESSAGETABLE).values(
					MESSAGETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					MESSAGETABLE.MESSAGE_SENDER.value(new JdbcNamedParameter("messageSender")),
					MESSAGETABLE.MESSAGE_RECEIVER.value(new JdbcNamedParameter("messageReceiver")),
					MESSAGETABLE.MESSAGE_SENDDATE.value(new JdbcNamedParameter("messageSenddate")),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.value(new JdbcNamedParameter("messageReceivedate")),
					MESSAGETABLE.MESSAGE_CONTENT.value(new JdbcNamedParameter("messageContent")),
					MESSAGETABLE.MESSAGE_TYPE.value(new JdbcNamedParameter("messageType")),
					MESSAGETABLE.MESSAGE_LEVEL.value(new JdbcNamedParameter("messageLevel")),
					MESSAGETABLE.MESSAGE_FLAG.value(new JdbcNamedParameter("messageFlag")));
			}
		});
	}

	public int[] batchInsert(List<Message> messages){
			return batchInsert(true ,messages);
	}

	public int[] batchUpdate(List<Message> messages) {
		if (CollectionUtil.isEmpty(messages)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(messages, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(MESSAGETABLE).set(
					MESSAGETABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					MESSAGETABLE.MESSAGE_SENDER.value(new JdbcNamedParameter("messageSender")),
					MESSAGETABLE.MESSAGE_RECEIVER.value(new JdbcNamedParameter("messageReceiver")),
					MESSAGETABLE.MESSAGE_SENDDATE.value(new JdbcNamedParameter("messageSenddate")),
					MESSAGETABLE.MESSAGE_RECEIVEDATE.value(new JdbcNamedParameter("messageReceivedate")),
					MESSAGETABLE.MESSAGE_CONTENT.value(new JdbcNamedParameter("messageContent")),
					MESSAGETABLE.MESSAGE_TYPE.value(new JdbcNamedParameter("messageType")),
					MESSAGETABLE.MESSAGE_LEVEL.value(new JdbcNamedParameter("messageLevel")),
					MESSAGETABLE.MESSAGE_FLAG.value(new JdbcNamedParameter("messageFlag"))).where(
				MESSAGETABLE.MESSAGE_ID.eq(new JdbcNamedParameter("messageId")));
			}
		});
	}

	public int[] batchDelete(List<Message> messages) {
		if (CollectionUtil.isEmpty(messages)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(messages, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(MESSAGETABLE).where(and(
				MESSAGETABLE.MESSAGE_ID.eq(new JdbcNamedParameter("messageId")),
				MESSAGETABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				MESSAGETABLE.MESSAGE_SENDER.eq(new JdbcNamedParameter("messageSender")),
				MESSAGETABLE.MESSAGE_RECEIVER.eq(new JdbcNamedParameter("messageReceiver")),
				MESSAGETABLE.MESSAGE_SENDDATE.eq(new JdbcNamedParameter("messageSenddate")),
				MESSAGETABLE.MESSAGE_RECEIVEDATE.eq(new JdbcNamedParameter("messageReceivedate")),
				MESSAGETABLE.MESSAGE_CONTENT.eq(new JdbcNamedParameter("messageContent")),
				MESSAGETABLE.MESSAGE_TYPE.eq(new JdbcNamedParameter("messageType")),
				MESSAGETABLE.MESSAGE_LEVEL.eq(new JdbcNamedParameter("messageLevel")),
				MESSAGETABLE.MESSAGE_FLAG.eq(new JdbcNamedParameter("messageFlag"))));
			}
		});
	}

}
