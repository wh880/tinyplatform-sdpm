/**
 *  Copyright (c) 1997-2013, www.tinygroup.org (luo_guo@icloud.com).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.tinygroup.sdpm.quality.impl;

import static org.tinygroup.tinysqldsl.base.StatementSqlBuilder.and;
import static org.tinygroup.sdpm.quality.constant.QualityAssessmentTable.*;
import static org.tinygroup.tinysqldsl.Select.*;
import static org.tinygroup.tinysqldsl.Insert.*;
import static org.tinygroup.tinysqldsl.Delete.*;
import static org.tinygroup.tinysqldsl.Update.*;

import java.io.Serializable;

import java.util.List;

import org.tinygroup.tinysqldsl.Delete;
import org.tinygroup.tinysqldsl.Insert;
import org.tinygroup.tinysqldsl.Select;
import org.tinygroup.tinysqldsl.Update;
import org.tinygroup.tinysqldsl.Pager;
import org.tinygroup.commons.tools.CollectionUtil;
import org.tinygroup.tinysqldsl.expression.JdbcNamedParameter;
import org.tinygroup.tinysqldsl.extend.MysqlSelect;
import org.tinygroup.sdpm.quality.pojo.QualityAssessment;
import org.tinygroup.sdpm.quality.inter.QualityAssessmentDao;
import org.tinygroup.jdbctemplatedslsession.daosupport.TinyDslDaoSupport;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;

public class QualityAssessmentDaoImpl extends TinyDslDaoSupport implements QualityAssessmentDao {

	public QualityAssessment insertObject(QualityAssessment qualityAssessment) {
		return getDslTemplate().insertObject(qualityAssessment, new InsertGenerateCallback<QualityAssessment>() {
			public Insert generate(QualityAssessment t) {
				Insert insert = insertInto(QUALITYASSESSMENTTABLE).values(
					QUALITYASSESSMENTTABLE.QA_ID.value(t.getQaId()),
					QUALITYASSESSMENTTABLE.COMPANY_ID.value(t.getCompanyId()),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.value(t.getProductId()),
					QUALITYASSESSMENTTABLE.MODULE_ID.value(t.getModuleId()),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.value(t.getModuleFeature()),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.value(t.getQaProperty()),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.value(t.getQaFeatureValue()),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.value(t.getQaTestCoverage()),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.value(t.getQaOpenbugImpact()),
					QUALITYASSESSMENTTABLE.QA_COMMENT.value(t.getQaComment()),
					QUALITYASSESSMENTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public QualityAssessment insertObject(boolean autoGeneratedKeys ,QualityAssessment qualityAssessment) {
		return getDslTemplate().insertObjectAndReturnKey(autoGeneratedKeys ,qualityAssessment, new InsertGenerateCallback<QualityAssessment>() {

			public Insert generate(QualityAssessment t) {
				Insert insert = insertInto(QUALITYASSESSMENTTABLE).values(
					QUALITYASSESSMENTTABLE.QA_ID.value(t.getQaId()),
					QUALITYASSESSMENTTABLE.COMPANY_ID.value(t.getCompanyId()),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.value(t.getProductId()),
					QUALITYASSESSMENTTABLE.MODULE_ID.value(t.getModuleId()),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.value(t.getModuleFeature()),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.value(t.getQaProperty()),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.value(t.getQaFeatureValue()),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.value(t.getQaTestCoverage()),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.value(t.getQaOpenbugImpact()),
					QUALITYASSESSMENTTABLE.QA_COMMENT.value(t.getQaComment()),
					QUALITYASSESSMENTTABLE.DELETED.value(t.getDeleted()));
				return insert;
			}
		});
	}

	public int updateObject(QualityAssessment qualityAssessment) {
		return getDslTemplate().updateObject(qualityAssessment, new UpdateGenerateCallback<QualityAssessment>() {
			public Update generate(QualityAssessment t) {
				Update update = update(QUALITYASSESSMENTTABLE).set(
					QUALITYASSESSMENTTABLE.COMPANY_ID.value(t.getCompanyId()),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.value(t.getProductId()),
					QUALITYASSESSMENTTABLE.MODULE_ID.value(t.getModuleId()),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.value(t.getModuleFeature()),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.value(t.getQaProperty()),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.value(t.getQaFeatureValue()),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.value(t.getQaTestCoverage()),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.value(t.getQaOpenbugImpact()),
					QUALITYASSESSMENTTABLE.QA_COMMENT.value(t.getQaComment()),
					QUALITYASSESSMENTTABLE.DELETED.value(t.getDeleted())).where(
					QUALITYASSESSMENTTABLE.QA_ID.eq(t.getQaId()));
				return update;
			}
		});
	}

	public int deleteObject(Serializable pk){
		return getDslTemplate().deleteObject(pk, new DeleteGenerateCallback<Serializable>() {
			public Delete generate(Serializable pk) {
				return delete(QUALITYASSESSMENTTABLE).where(QUALITYASSESSMENTTABLE.QA_ID.eq(pk));
			}
		});
	}

	public int deleteObjects(Serializable... pks) {
		return getDslTemplate().deleteObjects(new DeleteGenerateCallback<Serializable[]>() {
			public Delete generate(Serializable[] t) {
				return delete(QUALITYASSESSMENTTABLE).where(QUALITYASSESSMENTTABLE.QA_ID.in(t));
		}
		},pks);
	}

	public QualityAssessment getObjectById(Serializable pk) {
		return getDslTemplate().getObjectById(pk, QualityAssessment.class, new SelectGenerateCallback<Serializable>() {
		@SuppressWarnings("rawtypes")
		public Select generate(Serializable t) {
			return selectFrom(QUALITYASSESSMENTTABLE).where(QUALITYASSESSMENTTABLE.QA_ID.eq(t));
			}
		});
	}

	public List<QualityAssessment> queryObjects(QualityAssessment qualityAssessment) {
		if(qualityAssessment==null){
			qualityAssessment=new QualityAssessment();
		}
		return getDslTemplate().queryObjects(qualityAssessment, new SelectGenerateCallback<QualityAssessment>() {

			@SuppressWarnings("rawtypes")
			public Select generate(QualityAssessment t) {
				return selectFrom(QUALITYASSESSMENTTABLE).where(
				and(
					QUALITYASSESSMENTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.eq(t.getProductId()),
					QUALITYASSESSMENTTABLE.MODULE_ID.eq(t.getModuleId()),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.eq(t.getModuleFeature()),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.eq(t.getQaProperty()),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.eq(t.getQaFeatureValue()),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.eq(t.getQaTestCoverage()),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.eq(t.getQaOpenbugImpact()),
					QUALITYASSESSMENTTABLE.QA_COMMENT.eq(t.getQaComment()),
					QUALITYASSESSMENTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public Pager<QualityAssessment> queryObjectsForPage(int start,int limit ,QualityAssessment qualityAssessment) {
		if(qualityAssessment==null){
			qualityAssessment=new QualityAssessment();
		}
		return getDslTemplate().queryObjectsForPage(start, limit, qualityAssessment, false, new SelectGenerateCallback<QualityAssessment>() {

			public Select generate(QualityAssessment t) {
				return MysqlSelect.selectFrom(QUALITYASSESSMENTTABLE).where(
				and(
					QUALITYASSESSMENTTABLE.COMPANY_ID.eq(t.getCompanyId()),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.eq(t.getProductId()),
					QUALITYASSESSMENTTABLE.MODULE_ID.eq(t.getModuleId()),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.eq(t.getModuleFeature()),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.eq(t.getQaProperty()),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.eq(t.getQaFeatureValue()),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.eq(t.getQaTestCoverage()),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.eq(t.getQaOpenbugImpact()),
					QUALITYASSESSMENTTABLE.QA_COMMENT.eq(t.getQaComment()),
					QUALITYASSESSMENTTABLE.DELETED.eq(t.getDeleted())));
			}
		});
	}

	public int[] batchInsert(boolean autoGeneratedKeys ,List<QualityAssessment> qualityAssessments) {
		if (CollectionUtil.isEmpty(qualityAssessments)) {
			return new int[0];
		}
		return getDslTemplate().batchInsert(autoGeneratedKeys, qualityAssessments, new NoParamInsertGenerateCallback() {

			public Insert generate() {
				return insertInto(QUALITYASSESSMENTTABLE).values(
					QUALITYASSESSMENTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.value(new JdbcNamedParameter("productId")),
					QUALITYASSESSMENTTABLE.MODULE_ID.value(new JdbcNamedParameter("moduleId")),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.value(new JdbcNamedParameter("moduleFeature")),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.value(new JdbcNamedParameter("qaProperty")),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.value(new JdbcNamedParameter("qaFeatureValue")),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.value(new JdbcNamedParameter("qaTestCoverage")),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.value(new JdbcNamedParameter("qaOpenbugImpact")),
					QUALITYASSESSMENTTABLE.QA_COMMENT.value(new JdbcNamedParameter("qaComment")),
					QUALITYASSESSMENTTABLE.DELETED.value(new JdbcNamedParameter("deleted")));
			}
		});
	}

	public int[] batchInsert(List<QualityAssessment> qualityAssessments){
			return batchInsert(true ,qualityAssessments);
	}

	public int[] batchUpdate(List<QualityAssessment> qualityAssessments) {
		if (CollectionUtil.isEmpty(qualityAssessments)) {
			return new int[0];
		}
		return getDslTemplate().batchUpdate(qualityAssessments, new NoParamUpdateGenerateCallback() {

			public Update generate() {
				return update(QUALITYASSESSMENTTABLE).set(
					QUALITYASSESSMENTTABLE.COMPANY_ID.value(new JdbcNamedParameter("companyId")),
					QUALITYASSESSMENTTABLE.PRODUCT_ID.value(new JdbcNamedParameter("productId")),
					QUALITYASSESSMENTTABLE.MODULE_ID.value(new JdbcNamedParameter("moduleId")),
					QUALITYASSESSMENTTABLE.MODULE_FEATURE.value(new JdbcNamedParameter("moduleFeature")),
					QUALITYASSESSMENTTABLE.QA_PROPERTY.value(new JdbcNamedParameter("qaProperty")),
					QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.value(new JdbcNamedParameter("qaFeatureValue")),
					QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.value(new JdbcNamedParameter("qaTestCoverage")),
					QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.value(new JdbcNamedParameter("qaOpenbugImpact")),
					QUALITYASSESSMENTTABLE.QA_COMMENT.value(new JdbcNamedParameter("qaComment")),
					QUALITYASSESSMENTTABLE.DELETED.value(new JdbcNamedParameter("deleted"))).where(
				QUALITYASSESSMENTTABLE.QA_ID.eq(new JdbcNamedParameter("qaId")));
			}
		});
	}

	public int[] batchDelete(List<QualityAssessment> qualityAssessments) {
		if (CollectionUtil.isEmpty(qualityAssessments)) {
			return new int[0];
		}
		return getDslTemplate().batchDelete(qualityAssessments, new NoParamDeleteGenerateCallback() {

			public Delete generate() {
				return delete(QUALITYASSESSMENTTABLE).where(and(
				QUALITYASSESSMENTTABLE.QA_ID.eq(new JdbcNamedParameter("qaId")),
				QUALITYASSESSMENTTABLE.COMPANY_ID.eq(new JdbcNamedParameter("companyId")),
				QUALITYASSESSMENTTABLE.PRODUCT_ID.eq(new JdbcNamedParameter("productId")),
				QUALITYASSESSMENTTABLE.MODULE_ID.eq(new JdbcNamedParameter("moduleId")),
				QUALITYASSESSMENTTABLE.MODULE_FEATURE.eq(new JdbcNamedParameter("moduleFeature")),
				QUALITYASSESSMENTTABLE.QA_PROPERTY.eq(new JdbcNamedParameter("qaProperty")),
				QUALITYASSESSMENTTABLE.QA_FEATURE_VALUE.eq(new JdbcNamedParameter("qaFeatureValue")),
				QUALITYASSESSMENTTABLE.QA_TEST_COVERAGE.eq(new JdbcNamedParameter("qaTestCoverage")),
				QUALITYASSESSMENTTABLE.QA_OPENBUG_IMPACT.eq(new JdbcNamedParameter("qaOpenbugImpact")),
				QUALITYASSESSMENTTABLE.QA_COMMENT.eq(new JdbcNamedParameter("qaComment")),
				QUALITYASSESSMENTTABLE.DELETED.eq(new JdbcNamedParameter("deleted"))));
			}
		});
	}

}
